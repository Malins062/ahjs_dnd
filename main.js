(()=>{"use strict";var e,t,r,n,i,o,s,a={394:(e,t,r)=>{r(177),r(920),r(489);const n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let i;const o=new Uint8Array(16);function s(){if(!i&&(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!i))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(o)}const a=[];for(let e=0;e<256;++e)a.push((e+256).toString(16).slice(1));const c=function(e,t,r){if(n.randomUUID&&!t&&!e)return n.randomUUID();const i=(e=e||{}).random||(e.rng||s)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=i[e];return t}return function(e,t=0){return(a[e[t+0]]+a[e[t+1]]+a[e[t+2]]+a[e[t+3]]+"-"+a[e[t+4]]+a[e[t+5]]+"-"+a[e[t+6]]+a[e[t+7]]+"-"+a[e[t+8]]+a[e[t+9]]+"-"+a[e[t+10]]+a[e[t+11]]+a[e[t+12]]+a[e[t+13]]+a[e[t+14]]+a[e[t+15]]).toLowerCase()}(i)};class d{constructor(){this.localStorage=window.localStorage}readItem(e){const t=this.localStorage.getItem(e);try{return JSON.parse(t)}catch(e){return null}}writeItem(e,t){try{return this.localStorage.setItem(e,JSON.stringify(t)),!0}catch(e){return e.code}}removeItem(e){try{return this.localStorage.removeItem(e),!0}catch(e){return e.code}}}const l="dragging",u="hovered",h="drop",p="hidden",f="taskslist";class m{constructor(e,t){let r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];this.parentEl=e,this.isUseStorage=r,this.shiftX=0,this.shiftY=0,this.dragItem=void 0,this.storage=new d,r?(this.tasksList=this.storage.readItem(f),this.tasksList||(this.tasksList=t),this.storage.writeItem(f,this.tasksList)):this.tasksList=t,this.tasksList.forEach((e=>{e.id=c()}))}static itemHTML(e){const t=c();return{innerHTML:`\n        <li class="tasks__item list-group-item mb-2" draggable="true" data-id="${t}">\n          ${e}\n          <div class="item__close hidden" title="Удалить задачу">&#10005;</div>\n        </li>`,id:t}}static itemsHTML(e){let t="";return e.forEach((e=>{t+=this.itemHTML(e).innerHTML})),t}static tasksListHTML(e){return`\n      <div class="col-md-4 h-100 py-2">        \n        <div class="tasks__card card" data-id="${e.id}">\n            <div class="tasks__header card-header p-2">\n                <h5 class="tasks__title mb-0">${e.title}</h5>\n            </div>\n\n            <div class="tasks__body card-body h-100 p-2" data-mdb-perfect-scrollbar="true">\n                <ul class="tasks__list list-group">\n                    ${m.itemsHTML(e.items)}\n                </ul>\n            </div>\n\n            <div class="tasks__footer card-footer text-start p-2">\n                <div class="item__add">&#10009; Добавить новую карточку</div>\n                <div class="item__card hidden">\n                  <form class="form-outline mb-2">\n                    <textarea class="new__item__text form-control mb-2"\n                      placeholder="Введите текст карточки"></textarea>\n                    <button class="new__item__add btn btn-success btn-sm" title="Добавить новую задачу">\n                      Добавить\n                    </button>\n                    <button class="new__item__close btn btn-transparent btn-sm" title="Закрыть окно добавления">\n                      &#10005;\n                    </button>\n                  </form>\n                </div>\n            </div>\n        </div>\n      </div>\n    `}static idSelector(e){return`[data-id="${e}"]`}static get showCardSelector(){return".item__add"}static get itemSelector(){return".tasks__item"}static get itemClass(){return"tasks__item"}static get listItemsSelector(){return".tasks__list"}static get listItemsClass(){return"tasks__list"}static get delItemSelector(){return".item__close"}static get delItemClass(){return"item__close"}static get cardSelector(){return".tasks__card"}static get cardTitleSelector(){return".tasks__title"}static get closeCardSelector(){return".new__item__close"}static get addCardSelector(){return".new__item__add"}static get cardDivSelector(){return".item__card"}static get textNewItemSelector(){return".new__item__text"}static changeClassTarget(e,t){let r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];setTimeout((()=>{r?e.classList.add(t):e.classList.remove(t)}),0)}static getNextElement(e,t){const r=t.getBoundingClientRect();return e<r.y+r.height/2?t:t.nextSibling}bindToDOM(){this.parentEl.innerHTML="",this.tasksList.forEach((e=>{this.parentEl.innerHTML+=m.tasksListHTML(e)})),this.tasksList.forEach((e=>this.initEvents(e.id)))}saveItems(){if(!this.isUseStorage)return;const e=this.parentEl.querySelectorAll(m.cardSelector);this.tasksList=[],e.forEach((e=>{const t={},r=e.querySelector(m.listItemsSelector),n=e.querySelector(m.cardTitleSelector),i=r.querySelectorAll(m.itemSelector);t.title=n.innerText,t.items=[],i.forEach((e=>t.items.push(e.innerHTML))),this.tasksList.push(t)})),this.storage.writeItem(f,this.tasksList)}initEvents(e){const t=this.parentEl.querySelector(m.idSelector(e)),r=t.querySelector(m.listItemsSelector),n=t.querySelector(m.showCardSelector),i=t.querySelector(m.textNewItemSelector),o=t.querySelector(m.addCardSelector),s=t.querySelector(m.closeCardSelector);n.addEventListener("click",(e=>this.onClickShowCard(e,t))),i.addEventListener("keydown",(e=>this.onEnterNewItem(e,t,r))),o.addEventListener("click",(e=>this.onClickAddCard(e,t,r))),s.addEventListener("click",(e=>this.onClickCloseCard(e,t))),this.onDragLeave=this.onDragLeave.bind(this),this.onDrop=this.onDrop.bind(this),this.onDragOver=this.onDragOver.bind(this),r.addEventListener("dragleave",this.onDragLeave),r.addEventListener("drop",this.onDrop),r.addEventListener("dragover",this.onDragOver),this.initItemsEvents(r)}initItemsEvents(e){e.querySelectorAll(m.itemSelector).forEach((e=>this.initItemEvents(e)))}initItemEvents(e){m.changeClassTarget(e,l);const t=e.querySelector(m.delItemSelector);t.addEventListener("click",(()=>{e.remove(),this.saveItems()})),e.addEventListener("mousedown",(()=>{m.changeClassTarget(e,l,!0),t.classList.contains("STYLE_HIDDEN")||t.classList.add("STYLE_HIDDEN")})),e.addEventListener("mouseup",(()=>{m.changeClassTarget(e,l),t.classList.contains("STYLE_HIDDEN")&&t.classList.remove("STYLE_HIDDEN")})),e.addEventListener("mouseover",(r=>{r.preventDefault(),m.changeClassTarget(e,u,!0),t.classList.contains(p)&&t.classList.remove(p)})),e.addEventListener("mouseout",(t=>{t.preventDefault(),m.changeClassTarget(e,u),this.parentEl.querySelectorAll(m.delItemSelector).forEach((e=>{e&&!e.classList.contains(p)&&e.classList.add(p)}))})),this.onDragStart=this.onDragStart.bind(this),this.onDragEnd=this.onDragEnd.bind(this),e.addEventListener("dragstart",this.onDragStart),e.addEventListener("dragend",this.onDragEnd)}onDragStart(e){e.dataTransfer.setData("text/html",e.currentTarget.outerHTML),e.dataTransfer.setData("text/plain",e.currentTarget.dataset.id),this.dragItem=e.currentTarget,m.changeClassTarget(this.dragItem,u),m.changeClassTarget(this.dragItem,l,!0)}onDragEnd(e){m.changeClassTarget(e.currentTarget,l),this.dragItem=void 0,this.tasksCard=void 0}onDrop(e){const t=e.currentTarget.closest(m.cardSelector);m.changeClassTarget(t,h),this.saveItems(),this.initItemsEvents(e.currentTarget)}onDragOver(e){e.preventDefault();const t=e.target.closest(m.cardSelector);this.tasksCard&&this.tasksCard.dataset.id!==t.dataset.id&&m.changeClassTarget(this.tasksCard,h),this.tasksCard=t,m.changeClassTarget(this.tasksCard,h,!0);const r=e.target;if(this.dragItem===r||!r.classList.contains(m.itemClass))return;const n=m.getNextElement(e.clientY,r);e.currentTarget.closest(m.listItemsSelector).insertBefore(this.dragItem,n)}onDragLeave(e){const t=e.target.closest(m.cardSelector);m.changeClassTarget(t,h)}onEnterNewItem(e,t,r){"Enter"===e.key&&(e.preventDefault(),this.onClickAddCard(e,t,r))}onClickAddCard(e,t,r){e.preventDefault();const n=t.querySelector(m.cardDivSelector).querySelector(m.textNewItemSelector);n.value.trim().length>0&&(r.innerHTML+=m.itemHTML([n.value]).innerHTML,this.saveItems(),this.initItemsEvents(r)),n.value="",this.onClickCloseCard(e,t)}onClickShowCard(e,t){e.preventDefault();const r=t.querySelector(m.cardDivSelector);r&&r.classList.contains("hidden")&&r.classList.remove("hidden"),e.target.classList.add("hidden")}onClickCloseCard(e,t){e.preventDefault();const r=t.querySelector(m.cardDivSelector),n=t.querySelector(m.showCardSelector);n&&n.classList.contains("hidden")&&n.classList.remove("hidden"),r.classList.add("hidden")}}new m(document.querySelector("#widget-container"),[{title:"Что запланировано сделать",items:["Доделать домашнее задание","Завершить HTML верстку","Написать тесты"]},{title:"Задания в процессе",items:["Работа над виджетом TasksList","Кнопка ДОБАВИТЬ"]},{title:"Сделано",items:["Описание README.md","Список пакетов - package.json","Общая HTML-разметка страницы","Файл запуска приложения JS"]},{title:"Запланировано на далекое будущее",items:["Стать чемпионом"]}]).bindToDOM()},783:(e,t,r)=>{var n=r(618),i=Object.create(null),o="undefined"==typeof document,s=Array.prototype.forEach;function a(){}function c(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function d(){var e=document.querySelectorAll("link");s.call(e,(function(e){!0!==e.visited&&c(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(o)return console.log("no window.document found, will not HMR CSS"),a;var r,u,h=function(e){var t=i[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),o=r[r.length-1];o&&(t=o.src)}i[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),i=r&&r[1];return i&&e?e.split(",").map((function(e){var r=new RegExp("".concat(i,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,i),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return s.call(t,(function(t){if(t.href){var i=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(i)&&!0!==t.visited&&i&&(c(t,i),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(u),u=setTimeout(n,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},920:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},177:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},489:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},c={};function d(e){var t=c[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=c[e]={id:e,exports:{}};try{var n={id:e,module:r,factory:a[e],require:d};d.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require)}catch(e){throw r.error=e,e}return r.exports}d.m=a,d.c=c,d.i=[],d.hu=e=>e+"."+d.h()+".hot-update.js",d.miniCssF=e=>"main.css",d.hmrF=()=>"main."+d.h()+".hot-update.json",d.h=()=>"ccfa1b9776f3f3e3771b",d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs-dnd:",d.l=(r,n,i,o)=>{if(e[r])e[r].push(n);else{var s,a;if(void 0!==i)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+i){s=u;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,d.nc&&s.setAttribute("nonce",d.nc),s.setAttribute("data-webpack",t+i),s.src=r),e[r]=[n];var h=(t,n)=>{s.onerror=s.onload=null,clearTimeout(p);var i=e[r];if(delete e[r],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=h.bind(null,s.onerror),s.onload=h.bind(null,s.onload),a&&document.head.appendChild(s)}},(()=>{var e,t,r,n={},i=d.c,o=[],s=[],a="idle",c=0,l=[];function u(e){a=e;for(var t=[],r=0;r<s.length;r++)t[r]=s[r].call(null,e);return Promise.all(t)}function h(){0==--c&&u("ready").then((function(){if(0===c){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return u("check").then(d.hmrM).then((function(r){return r?u("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(d.hmrC).reduce((function(e,i){return d.hmrC[i](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return n}))},0===c?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var n=t.map((function(t){return t(e)}));t=void 0;var i=n.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return u("abort").then((function(){throw i[0]}));var o=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var s,a=u("apply"),c=function(e){s||(s=e)},d=[];return n.forEach((function(e){if(e.apply){var t=e.apply(c);if(t)for(var r=0;r<t.length;r++)d.push(t[r])}})),Promise.all([o,a]).then((function(){return s?u("fail").then((function(){throw s})):r?m(e).then((function(e){return d.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return d}))}))}function v(){if(r)return t||(t=[]),Object.keys(d.hmrI).forEach((function(e){r.forEach((function(r){d.hmrI[e](r,t)}))})),r=void 0,!0}d.hmrD=n,d.i.push((function(l){var m,v,g,y,E=l.module,_=function(t,r){var n=i[r];if(!n)return t;var s=function(s){if(n.hot.active){if(i[s]){var a=i[s].parents;-1===a.indexOf(r)&&a.push(r)}else o=[r],e=s;-1===n.children.indexOf(s)&&n.children.push(s)}else console.warn("[HMR] unexpected require("+s+") from disposed module "+r),o=[];return t(s)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(s,l,d(l));return s.e=function(e){return function(e){switch(a){case"ready":u("prepare");case"prepare":return c++,e.then(h,h),e;default:return e}}(t.e(e))},s}(l.require,l.id);E.hot=(m=l.id,v=E,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){o=v.parents.slice(),e=g?void 0:m,d(m)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":t=[],Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return a;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var t=s.indexOf(e);t>=0&&s.splice(t,1)},data:n[m]},e=void 0,y),E.parents=o,E.children=[],o=[],l.require=_})),d.hmrC={},d.hmrI={}})(),(()=>{var e;d.g.importScripts&&(e=d.g.location+"");var t=d.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),d.p=e})(),r=(e,t,r,n)=>{var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=o=>{if(i.onerror=i.onload=null,"load"===o.type)r();else{var s=o&&("load"===o.type?"missing":o.type),a=o&&o.target&&o.target.href||t,c=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");c.code="CSS_CHUNK_LOAD_FAILED",c.type=s,c.request=a,i.parentNode.removeChild(i),n(c)}},i.href=t,document.head.appendChild(i),i},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var i=(s=r[n]).getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(i===e||i===t))return s}var o=document.getElementsByTagName("style");for(n=0;n<o.length;n++){var s;if((i=(s=o[n]).getAttribute("data-href"))===e||i===t)return s}},i=[],o=[],s=e=>({dispose:()=>{for(var e=0;e<i.length;e++){var t=i[e];t.parentNode&&t.parentNode.removeChild(t)}i.length=0},apply:()=>{for(var e=0;e<o.length;e++)o[e].rel="stylesheet";o.length=0}}),d.hmrC.miniCss=(e,t,a,c,l,u)=>{l.push(s),e.forEach((e=>{var t=d.miniCssF(e),s=d.p+t,a=n(t,s);a&&c.push(new Promise(((t,n)=>{var c=r(e,s,(()=>{c.as="style",c.rel="preload",t()}),n);i.push(a),o.push(c)})))}))},(()=>{var e,t,r,n,i,o=d.hmrS_jsonp=d.hmrS_jsonp||{179:0},s={};function a(t,r){return e=r,new Promise(((e,r)=>{s[t]=e;var n=d.p+d.hu(t),i=new Error;d.l(n,(e=>{if(s[t]){s[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+t+" failed.\n("+n+": "+o+")",i.name="ChunkLoadError",i.type=n,i.request=o,r(i)}}))}))}function c(e){function s(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),o=i.id,s=i.chain,c=d.c[o];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var l=0;l<c.parents.length;l++){var u=c.parents[l],h=d.c[u];if(h){if(h.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(h.hot._acceptedDependencies[o]?(r[u]||(r[u]=[]),a(r[u],[o])):(delete r[u],t.push(u),n.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}d.f&&delete d.f.jsonpHmr,t=void 0;var c={},l=[],u={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(d.o(r,p)){var f,m=r[p],v=!1,g=!1,y=!1,E="";switch((f=m?s(p):{type:"disposed",moduleId:p}).chain&&(E="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(f),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(g)for(p in u[p]=m,a(l,f.outdatedModules),f.outdatedDependencies)d.o(f.outdatedDependencies,p)&&(c[p]||(c[p]=[]),a(c[p],f.outdatedDependencies[p]));y&&(a(l,[f.moduleId]),u[p]=h)}r=void 0;for(var _,S=[],L=0;L<l.length;L++){var b=l[L],I=d.c[b];I&&(I.hot._selfAccepted||I.hot._main)&&u[b]!==h&&!I.hot._selfInvalidated&&S.push({module:b,require:I.hot._requireSelf,errorHandler:I.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var t,r=l.slice();r.length>0;){var i=r.pop(),s=d.c[i];if(s){var a={},u=s.hot._disposeHandlers;for(L=0;L<u.length;L++)u[L].call(null,a);for(d.hmrD[i]=a,s.hot.active=!1,delete d.c[i],delete c[i],L=0;L<s.children.length;L++){var h=d.c[s.children[L]];h&&(e=h.parents.indexOf(i))>=0&&h.parents.splice(e,1)}}}for(var p in c)if(d.o(c,p)&&(s=d.c[p]))for(_=c[p],L=0;L<_.length;L++)t=_[L],(e=s.children.indexOf(t))>=0&&s.children.splice(e,1)},apply:function(t){for(var r in u)d.o(u,r)&&(d.m[r]=u[r]);for(var n=0;n<i.length;n++)i[n](d);for(var o in c)if(d.o(c,o)){var s=d.c[o];if(s){_=c[o];for(var a=[],h=[],p=[],f=0;f<_.length;f++){var m=_[f],v=s.hot._acceptedDependencies[m],g=s.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),h.push(g),p.push(m)}}for(var y=0;y<a.length;y++)try{a[y].call(null,_)}catch(r){if("function"==typeof h[y])try{h[y](r,{moduleId:o,dependencyId:p[y]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[y],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[y],error:r}),e.ignoreErrored||t(r)}}}for(var E=0;E<S.length;E++){var L=S[E],b=L.module;try{L.require(b)}catch(r){if("function"==typeof L.errorHandler)try{L.errorHandler(r,{moduleId:b,module:d.c[b]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:b,error:r}),e.ignoreErrored||t(r)}}return l}}}self.webpackHotUpdateajs_dnd=(t,n,o)=>{for(var a in n)d.o(n,a)&&(r[a]=n[a],e&&e.push(a));o&&i.push(o),s[t]&&(s[t](),s[t]=void 0)},d.hmrI.jsonp=function(e,t){r||(r={},i=[],n=[],t.push(c)),d.o(r,e)||(r[e]=d.m[e])},d.hmrC.jsonp=function(e,s,l,u,h,p){h.push(c),t={},n=s,r=l.reduce((function(e,t){return e[t]=!1,e}),{}),i=[],e.forEach((function(e){d.o(o,e)&&void 0!==o[e]?(u.push(a(e,p)),t[e]=!0):t[e]=!1})),d.f&&(d.f.jsonpHmr=function(e,r){t&&d.o(t,e)&&!t[e]&&(r.push(a(e)),t[e]=!0)})},d.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(d.p+d.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),d(394)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoidUJBQUlBLEVBQ0FDLEVDREFDLEVBMkJBQyxFQXdCQUMsRUFDQUMsRUFDQUMsRSxzQ0NyREosTUFDQSxHQUNFQyxXQUZtQyxvQkFBWEMsUUFBMEJBLE9BQU9ELFlBQWNDLE9BQU9ELFdBQVdFLEtBQUtELFNDR2hHLElBQUlFLEVBQ0osTUFBTUMsRUFBUSxJQUFJQyxXQUFXLElBQ2QsU0FBU0MsSUFFdEIsSUFBS0gsSUFFSEEsRUFBb0Msb0JBQVhGLFFBQTBCQSxPQUFPRSxpQkFBbUJGLE9BQU9FLGdCQUFnQkQsS0FBS0QsU0FFcEdFLEdBQ0gsTUFBTSxJQUFJSSxNQUFNLDRHQUlwQixPQUFPSixFQUFnQkMsRUFDekIsQ0NYQSxNQUFNSSxFQUFZLEdBRWxCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJLE1BQU9BLEVBQ3pCRCxFQUFVRSxNQUFNRCxFQUFJLEtBQU9FLFNBQVMsSUFBSUMsTUFBTSxJQ21CaEQsUUF4QkEsU0FBWUMsRUFBU0MsRUFBS0MsR0FDeEIsR0FBSSxlQUFzQkQsSUFBUUQsRUFDaEMsT0FBTyxlQUlULE1BQU1HLEdBRE5ILEVBQVVBLEdBQVcsQ0FBQyxHQUNESSxTQUFXSixFQUFRUCxLQUFPQSxLQUsvQyxHQUhBVSxFQUFLLEdBQWUsR0FBVkEsRUFBSyxHQUFZLEdBQzNCQSxFQUFLLEdBQWUsR0FBVkEsRUFBSyxHQUFZLElBRXZCRixFQUFLLENBQ1BDLEVBQVNBLEdBQVUsRUFFbkIsSUFBSyxJQUFJTixFQUFJLEVBQUdBLEVBQUksS0FBTUEsRUFDeEJLLEVBQUlDLEVBQVNOLEdBQUtPLEVBQUtQLEdBR3pCLE9BQU9LLENBQ1QsQ0FFQSxPRGJLLFNBQXlCSSxFQUFLSCxFQUFTLEdBRzVDLE9BQVFQLEVBQVVVLEVBQUlILEVBQVMsSUFBTVAsRUFBVVUsRUFBSUgsRUFBUyxJQUFNUCxFQUFVVSxFQUFJSCxFQUFTLElBQU1QLEVBQVVVLEVBQUlILEVBQVMsSUFBTSxJQUFNUCxFQUFVVSxFQUFJSCxFQUFTLElBQU1QLEVBQVVVLEVBQUlILEVBQVMsSUFBTSxJQUFNUCxFQUFVVSxFQUFJSCxFQUFTLElBQU1QLEVBQVVVLEVBQUlILEVBQVMsSUFBTSxJQUFNUCxFQUFVVSxFQUFJSCxFQUFTLElBQU1QLEVBQVVVLEVBQUlILEVBQVMsSUFBTSxJQUFNUCxFQUFVVSxFQUFJSCxFQUFTLEtBQU9QLEVBQVVVLEVBQUlILEVBQVMsS0FBT1AsRUFBVVUsRUFBSUgsRUFBUyxLQUFPUCxFQUFVVSxFQUFJSCxFQUFTLEtBQU9QLEVBQVVVLEVBQUlILEVBQVMsS0FBT1AsRUFBVVUsRUFBSUgsRUFBUyxNQUFNSSxhQUN2ZixDQ1NTQyxDQUFnQkosRUFDekIsRUMxQmUsTUFBTUssRUFRbkJDLGNBQ0VDLEtBQUtDLGFBQWVDLE9BQU9ELFlBQzdCLENBRUFFLFNBQVNDLEdBQ1AsTUFBTUMsRUFBT0wsS0FBS0MsYUFBYUssUUFBUUYsR0FDdkMsSUFDRSxPQUFPRyxLQUFLQyxNQUFNSCxFQUdwQixDQUZFLE1BQU9JLEdBQ1AsT0FBTyxJQUNULENBQ0YsQ0FFQUMsVUFBVU4sRUFBU0MsR0FDakIsSUFFRSxPQURBTCxLQUFLQyxhQUFhVSxRQUFRUCxFQUFTRyxLQUFLSyxVQUFVUCxLQUMzQyxDQUdULENBRkUsTUFBT0ksR0FDUCxPQUFPQSxFQUFFSSxJQUNYLENBQ0YsQ0FFQUMsV0FBV1YsR0FDVCxJQUVFLE9BREFKLEtBQUtDLGFBQWFhLFdBQVdWLElBQ3RCLENBR1QsQ0FGRSxNQUFPSyxHQUNQLE9BQU9BLEVBQUVJLElBQ1gsQ0FDRixFQ1pGLE1BQU1FLEVBQWlCLFdBQ2pCQyxFQUFnQixVQUNoQkMsRUFBYSxPQUNiQyxFQUFlLFNBQ2ZDLEVBQVcsWUFFRixNQUFNQyxFQUNuQnJCLFlBQVlzQixFQUFVQyxHQUFnQyxJQUFyQkMsSUFBZSxVQUFILCtDQUMzQ3ZCLEtBQUtxQixTQUFXQSxFQUNoQnJCLEtBQUt1QixhQUFlQSxFQUNwQnZCLEtBQUt3QixPQUFTLEVBQ2R4QixLQUFLeUIsT0FBUyxFQUNkekIsS0FBSzBCLGNBQVdDLEVBRWhCM0IsS0FBSzRCLFFBQVUsSUFBSTlCLEVBQ2Z5QixHQUNGdkIsS0FBS3NCLFVBQVl0QixLQUFLNEIsUUFBUXpCLFNBQVNnQixHQUNsQ25CLEtBQUtzQixZQUNSdEIsS0FBS3NCLFVBQVlBLEdBRW5CdEIsS0FBSzRCLFFBQVFsQixVQUFVUyxFQUFVbkIsS0FBS3NCLFlBRXRDdEIsS0FBS3NCLFVBQVlBLEVBS25CdEIsS0FBS3NCLFVBQVVPLFNBQVNDLElBQVdBLEVBQUtDLEdBQUtDLEdBQVEsR0FDdkQsQ0FFQUMsZ0JBQWdCQyxHQUNkLE1BQU1ILEVBQUtDLElBTVgsTUFBTyxDQUNMRyxVQU5ZLG9GQUMrREosa0JBQ3JFRyxvR0FLTkgsS0FFSixDQUVBRSxpQkFBaUJHLEdBQ2YsSUFBSUMsRUFBTyxHQUlYLE9BSEFELEVBQU1QLFNBQVNTLElBQ2JELEdBQVFyQyxLQUFLdUMsU0FBU0QsR0FBVUgsU0FBUyxJQUVwQ0UsQ0FDVCxDQUVBSixxQkFBcUJYLEdBQ25CLE1BQVEscUdBRXFDQSxFQUFVUyxnSEFFWFQsRUFBVWtCLDJNQUtwQ3BCLEVBQWdCcUIsVUFBVW5CLEVBQVVjLG00QkFzQnhELENBRUFILGtCQUFrQkYsR0FDaEIsTUFBUSxhQUFZQSxLQUN0QixDQUVXVyw4QkFDVCxNQUFPLFlBQ1QsQ0FFV0MsMEJBQ1QsTUFBTyxjQUNULENBRVdDLHVCQUNULE1BQU8sYUFDVCxDQUVXQywrQkFDVCxNQUFPLGNBQ1QsQ0FFV0MsNEJBQ1QsTUFBTyxhQUNULENBRVdDLDZCQUNULE1BQU8sY0FDVCxDQUVXQywwQkFDVCxNQUFPLGFBQ1QsQ0FFV0MsMEJBQ1QsTUFBTyxjQUNULENBRVdDLCtCQUNULE1BQU8sZUFDVCxDQUVXQywrQkFDVCxNQUFPLG1CQUNULENBRVdDLDZCQUNULE1BQU8saUJBQ1QsQ0FFV0MsNkJBQ1QsTUFBTyxhQUNULENBRVdDLGlDQUNULE1BQU8sa0JBQ1QsQ0FFQXJCLHlCQUF5QnNCLEVBQVFDLEdBQXlCLElBQWxCQyxFQUFXLFVBQUgsOENBQzlDQyxZQUFXLEtBQ0xELEVBQ0ZGLEVBQU9JLFVBQVVDLElBQUlKLEdBRXJCRCxFQUFPSSxVQUFVRSxPQUFPTCxFQUMxQixHQUNDLEVBQ0wsQ0FFQXZCLHNCQUFzQjZCLEVBQWdCQyxHQUNwQyxNQUFNQyxFQUFzQkQsRUFBZUUsd0JBUTNDLE9BTHFCSCxFQUZRRSxFQUFvQkUsRUFBSUYsRUFBb0JHLE9BQVMsRUFHOUVKLEVBQ0FBLEVBQWVLLFdBSXJCLENBR0FDLFlBRUVyRSxLQUFLcUIsU0FBU2MsVUFBWSxHQUMxQm5DLEtBQUtzQixVQUFVTyxTQUFTUCxJQUN0QnRCLEtBQUtxQixTQUFTYyxXQUFhZixFQUFnQmtELGNBQWNoRCxFQUFVLElBSXJFdEIsS0FBS3NCLFVBQVVPLFNBQVNDLEdBQVM5QixLQUFLdUUsV0FBV3pDLEVBQUtDLEtBQ3hELENBRUF5QyxZQUNFLElBQUt4RSxLQUFLdUIsYUFDUixPQUdGLE1BQU1rRCxFQUFhekUsS0FBS3FCLFNBQVNxRCxpQkFBaUJ0RCxFQUFnQjZCLGNBQ2xFakQsS0FBS3NCLFVBQVksR0FFakJtRCxFQUFXNUMsU0FBUzhDLElBQ2xCLE1BQU03QyxFQUFPLENBQUMsRUFDUjhDLEVBQWlCRCxFQUFLRSxjQUFjekQsRUFBZ0J5QixtQkFDcERMLEVBQVFtQyxFQUFLRSxjQUFjekQsRUFBZ0I4QixtQkFDM0NkLEVBQVF3QyxFQUFlRixpQkFBaUJ0RCxFQUFnQnVCLGNBRTlEYixFQUFLVSxNQUFRQSxFQUFNc0MsVUFDbkJoRCxFQUFLTSxNQUFRLEdBQ2JBLEVBQU1QLFNBQVNrRCxHQUFTakQsRUFBS00sTUFBTWpELEtBQUs0RixFQUFLNUMsYUFFN0NuQyxLQUFLc0IsVUFBVW5DLEtBQUsyQyxFQUFLLElBSTNCOUIsS0FBSzRCLFFBQVFsQixVQUFVUyxFQUFVbkIsS0FBS3NCLFVBQ3hDLENBRUFpRCxXQUFXeEMsR0FDVCxNQUFNaUQsRUFBWWhGLEtBQUtxQixTQUFTd0QsY0FBY3pELEVBQWdCNkQsV0FBV2xELElBQ25FNkMsRUFBaUJJLEVBQVVILGNBQWN6RCxFQUFnQnlCLG1CQUd6RHFDLEVBQWVGLEVBQVVILGNBQWN6RCxFQUFnQnNCLGtCQUN2RHlDLEVBQWVILEVBQVVILGNBQWN6RCxFQUFnQmtDLHFCQUN2RDhCLEVBQWFKLEVBQVVILGNBQWN6RCxFQUFnQmdDLGlCQUNyRGlDLEVBQWdCTCxFQUFVSCxjQUFjekQsRUFBZ0IrQixtQkFFOUQrQixFQUFhSSxpQkFBaUIsU0FBVUMsR0FBUXZGLEtBQUt3RixnQkFBZ0JELEVBQUtQLEtBQzFFRyxFQUFhRyxpQkFBaUIsV0FBWUMsR0FBUXZGLEtBQUt5RixlQUFlRixFQUFLUCxFQUFXSixLQUN0RlEsRUFBV0UsaUJBQWlCLFNBQVVDLEdBQVF2RixLQUFLMEYsZUFBZUgsRUFBS1AsRUFBV0osS0FDbEZTLEVBQWNDLGlCQUFpQixTQUFVQyxHQUFRdkYsS0FBSzJGLGlCQUFpQkosRUFBS1AsS0FFNUVoRixLQUFLNEYsWUFBYzVGLEtBQUs0RixZQUFZakgsS0FBS3FCLE1BQ3pDQSxLQUFLNkYsT0FBUzdGLEtBQUs2RixPQUFPbEgsS0FBS3FCLE1BQy9CQSxLQUFLOEYsV0FBYTlGLEtBQUs4RixXQUFXbkgsS0FBS3FCLE1BQ3ZDNEUsRUFBZVUsaUJBQWlCLFlBQWF0RixLQUFLNEYsYUFDbERoQixFQUFlVSxpQkFBaUIsT0FBUXRGLEtBQUs2RixRQUM3Q2pCLEVBQWVVLGlCQUFpQixXQUFZdEYsS0FBSzhGLFlBRWpEOUYsS0FBSytGLGdCQUFnQm5CLEVBQ3ZCLENBRUFtQixnQkFBZ0JDLEdBRUFBLEVBQUd0QixpQkFBaUJ0RCxFQUFnQnVCLGNBQzVDZCxTQUFTa0QsR0FBUy9FLEtBQUtpRyxlQUFlbEIsSUFDOUMsQ0FFQWtCLGVBQWVsQixHQUNiM0QsRUFBZ0I4RSxrQkFBa0JuQixFQUFNaEUsR0FHeEMsTUFBTW9GLEVBQWNwQixFQUFLRixjQUFjekQsRUFBZ0IyQixpQkFDdkRvRCxFQUFZYixpQkFBaUIsU0FBUyxLQUNwQ1AsRUFBS2xCLFNBQ0w3RCxLQUFLd0UsV0FBVyxJQUlsQk8sRUFBS08saUJBQWlCLGFBQWEsS0FDakNsRSxFQUFnQjhFLGtCQUFrQm5CLEVBQU1oRSxHQUFnQixHQUNuRG9GLEVBQVl4QyxVQUFVeUMsU0FBUyxpQkFDbENELEVBQVl4QyxVQUFVQyxJQUFJLGVBQzVCLElBR0ZtQixFQUFLTyxpQkFBaUIsV0FBVyxLQUMvQmxFLEVBQWdCOEUsa0JBQWtCbkIsRUFBTWhFLEdBQ3BDb0YsRUFBWXhDLFVBQVV5QyxTQUFTLGlCQUNqQ0QsRUFBWXhDLFVBQVVFLE9BQU8sZUFDL0IsSUFJRmtCLEVBQUtPLGlCQUFpQixhQUFjQyxJQUNsQ0EsRUFBSWMsaUJBQ0pqRixFQUFnQjhFLGtCQUFrQm5CLEVBQU0vRCxHQUFlLEdBQ25EbUYsRUFBWXhDLFVBQVV5QyxTQUFTbEYsSUFDakNpRixFQUFZeEMsVUFBVUUsT0FBTzNDLEVBQy9CLElBSUY2RCxFQUFLTyxpQkFBaUIsWUFBYUMsSUFDakNBLEVBQUljLGlCQUNKakYsRUFBZ0I4RSxrQkFBa0JuQixFQUFNL0QsR0FDckJoQixLQUFLcUIsU0FBU3FELGlCQUFpQnRELEVBQWdCMkIsaUJBQ3ZEbEIsU0FBU3lFLElBQ2RBLElBQWNBLEVBQVUzQyxVQUFVeUMsU0FBU2xGLElBQzdDb0YsRUFBVTNDLFVBQVVDLElBQUkxQyxFQUMxQixHQUNBLElBR0psQixLQUFLdUcsWUFBY3ZHLEtBQUt1RyxZQUFZNUgsS0FBS3FCLE1BQ3pDQSxLQUFLd0csVUFBWXhHLEtBQUt3RyxVQUFVN0gsS0FBS3FCLE1BQ3JDK0UsRUFBS08saUJBQWlCLFlBQWF0RixLQUFLdUcsYUFDeEN4QixFQUFLTyxpQkFBaUIsVUFBV3RGLEtBQUt3RyxVQUN4QyxDQUlBRCxZQUFZaEIsR0FDVkEsRUFBSWtCLGFBQWFDLFFBQVEsWUFBYW5CLEVBQUlvQixjQUFjQyxXQUN4RHJCLEVBQUlrQixhQUFhQyxRQUFRLGFBQWNuQixFQUFJb0IsY0FBY0UsUUFBUTlFLElBQ2pFL0IsS0FBSzBCLFNBQVc2RCxFQUFJb0IsY0FDcEJ2RixFQUFnQjhFLGtCQUFrQmxHLEtBQUswQixTQUFVVixHQUNqREksRUFBZ0I4RSxrQkFBa0JsRyxLQUFLMEIsU0FBVVgsR0FBZ0IsRUFFbkUsQ0FJQXlGLFVBQVVqQixHQUVSbkUsRUFBZ0I4RSxrQkFBa0JYLEVBQUlvQixjQUFlNUYsR0FDckRmLEtBQUswQixjQUFXQyxFQUNoQjNCLEtBQUtnRixlQUFZckQsQ0FDbkIsQ0FJQWtFLE9BQU9OLEdBRUwsTUFBTVAsRUFBWU8sRUFBSW9CLGNBQWNHLFFBQVExRixFQUFnQjZCLGNBQzVEN0IsRUFBZ0I4RSxrQkFBa0JsQixFQUFXL0QsR0FFN0NqQixLQUFLd0UsWUFDTHhFLEtBQUsrRixnQkFBZ0JSLEVBQUlvQixjQUMzQixDQUdBYixXQUFXUCxHQUNUQSxFQUFJYyxpQkFFSixNQUFNckIsRUFBWU8sRUFBSWhDLE9BQU91RCxRQUFRMUYsRUFBZ0I2QixjQUNqRGpELEtBQUtnRixXQUFhaEYsS0FBS2dGLFVBQVU2QixRQUFROUUsS0FBT2lELEVBQVU2QixRQUFROUUsSUFDcEVYLEVBQWdCOEUsa0JBQWtCbEcsS0FBS2dGLFVBQVcvRCxHQUVwRGpCLEtBQUtnRixVQUFZQSxFQUNqQjVELEVBQWdCOEUsa0JBQWtCbEcsS0FBS2dGLFVBQVcvRCxHQUFZLEdBRTlELE1BQU04QyxFQUFpQndCLEVBQUloQyxPQUkzQixHQUhtQnZELEtBQUswQixXQUFhcUMsSUFDaENBLEVBQWVKLFVBQVV5QyxTQUFTaEYsRUFBZ0J3QixXQUdyRCxPQUdGLE1BQU1tRSxFQUFjM0YsRUFBZ0I0RixlQUFlekIsRUFBSTBCLFFBQVNsRCxHQUM5Q3dCLEVBQUlvQixjQUFjRyxRQUFRMUYsRUFBZ0J5QixtQkFDbERxRSxhQUFhbEgsS0FBSzBCLFNBQVVxRixFQUN4QyxDQUlBbkIsWUFBWUwsR0FDVixNQUFNUCxFQUFZTyxFQUFJaEMsT0FBT3VELFFBQVExRixFQUFnQjZCLGNBQ3JEN0IsRUFBZ0I4RSxrQkFBa0JsQixFQUFXL0QsRUFDL0MsQ0FHQXdFLGVBQWVGLEVBQUtaLEVBQU1xQixHQUNSLFVBQVpULEVBQUk0QixNQUNONUIsRUFBSWMsaUJBQ0pyRyxLQUFLMEYsZUFBZUgsRUFBS1osRUFBTXFCLEdBRW5DLENBR0FOLGVBQWVILEVBQUtaLEVBQU1xQixHQUN4QlQsRUFBSWMsaUJBQ0osTUFDTWUsRUFEV3pDLEVBQUtFLGNBQWN6RCxFQUFnQmlDLGlCQUMxQndCLGNBQWN6RCxFQUFnQmtDLHFCQUNwRDhELEVBQVNDLE1BQU1DLE9BQU9DLE9BQVMsSUFFakN2QixFQUFHN0QsV0FBYWYsRUFBZ0JtQixTQUFTLENBQUM2RSxFQUFTQyxRQUFRbEYsVUFFM0RuQyxLQUFLd0UsWUFDTHhFLEtBQUsrRixnQkFBZ0JDLElBRXZCb0IsRUFBU0MsTUFBUSxHQUNqQnJILEtBQUsyRixpQkFBaUJKLEVBQUtaLEVBQzdCLENBSUFhLGdCQUFnQkQsRUFBS1osR0FDbkJZLEVBQUljLGlCQUNKLE1BQU1tQixFQUFXN0MsRUFBS0UsY0FBY3pELEVBQWdCaUMsaUJBQ2hEbUUsR0FBWUEsRUFBUzdELFVBQVV5QyxTQUFTLFdBQzFDb0IsRUFBUzdELFVBQVVFLE9BQU8sVUFFNUIwQixFQUFJaEMsT0FBT0ksVUFBVUMsSUFBSSxTQUMzQixDQUlBK0IsaUJBQWlCSixFQUFLWixHQUNwQlksRUFBSWMsaUJBQ0osTUFBTW1CLEVBQVc3QyxFQUFLRSxjQUFjekQsRUFBZ0JpQyxpQkFDOUNvRSxFQUFXOUMsRUFBS0UsY0FBY3pELEVBQWdCc0Isa0JBQ2hEK0UsR0FBWUEsRUFBUzlELFVBQVV5QyxTQUFTLFdBQzFDcUIsRUFBUzlELFVBQVVFLE9BQU8sVUFFNUIyRCxFQUFTN0QsVUFBVUMsSUFBSSxTQUN6QixFQ2hZc0IsSUFBSXhDLEVBQWdCc0csU0FBUzdDLGNBQWMscUJBN0JqRCxDQUNoQixDQUNFckMsTUFBTyw0QkFDUEosTUFBTyxDQUFDLDRCQUNOLHlCQUNBLG1CQUdKLENBQ0VJLE1BQU8scUJBQ1BKLE1BQU8sQ0FBQyxnQ0FDTixvQkFHSixDQUNFSSxNQUFPLFVBQ1BKLE1BQU8sQ0FBQyxxQkFDTixnQ0FDQSwrQkFDQSwrQkFHSixDQUNFSSxNQUFPLG1DQUNQSixNQUFPLENBQUMsc0JBTUlpQyxXLGdCQ3ZCaEIsSUFBSXNELEVBQWUsRUFBUSxLQUV2QkMsRUFBZ0JDLE9BQU9DLE9BQU8sTUFDOUJDLEVBQWlDLG9CQUFiTCxTQUNwQjdGLEVBQVVtRyxNQUFNQyxVQUFVcEcsUUFrQjlCLFNBQVNxRyxJQUFRLENBMkNqQixTQUFTQyxFQUFVQyxFQUFJQyxHQUNyQixJQUFLQSxFQUFLLENBQ1IsSUFBS0QsRUFBR0UsS0FDTixPQUlGRCxFQUFNRCxFQUFHRSxLQUFLQyxNQUFNLEtBQUssRUFDM0IsQ0FFQSxHQUFLQyxFQUFhSCxLQUlFLElBQWhCRCxFQUFHSyxVQU1GSixHQUFTQSxFQUFJSyxRQUFRLFNBQVcsRUFBckMsQ0FLQU4sRUFBR08sU0FBVSxFQUNiLElBQUlDLEVBQVFSLEVBQUdTLFlBQ2ZELEVBQU1ILFVBQVcsRUFDakJHLEVBQU10RCxpQkFBaUIsUUFBUSxXQUN6QnNELEVBQU1ILFdBSVZHLEVBQU1ILFVBQVcsRUFDakJMLEVBQUdVLFdBQVdDLFlBQVlYLEdBQzVCLElBQ0FRLEVBQU10RCxpQkFBaUIsU0FBUyxXQUMxQnNELEVBQU1ILFdBSVZHLEVBQU1ILFVBQVcsRUFDakJMLEVBQUdVLFdBQVdDLFlBQVlYLEdBQzVCLElBQ0FRLEVBQU1OLEtBQU8sR0FBR1UsT0FBT1gsRUFBSyxLQUFLVyxPQUFPQyxLQUFLQyxPQUV6Q2QsRUFBR2hFLFlBQ0xnRSxFQUFHVSxXQUFXNUIsYUFBYTBCLEVBQU9SLEVBQUdoRSxhQUVyQ2dFLEVBQUdVLFdBQVdLLFlBQVlQLEVBM0I1QixDQTZCRixDQStDQSxTQUFTUSxJQUNQLElBQUlDLEVBQVczQixTQUFTaEQsaUJBQWlCLFFBQ3pDN0MsRUFBUXlILEtBQUtELEdBQVUsU0FBVWpCLElBQ1osSUFBZkEsRUFBR08sU0FJUFIsRUFBVUMsRUFDWixHQUNGLENBRUEsU0FBU0ksRUFBYUgsR0FHcEIsUUFBSyxZQUFZa0IsS0FBS2xCLEVBS3hCLENBRUFtQixFQUFPQyxRQUFVLFNBQVVDLEVBQVVwSyxHQUNuQyxHQUFJeUksRUFFRixPQURBNEIsUUFBUUMsSUFBSSw4Q0FDTDFCLEVBR1QsSUF4TGdCMkIsRUFDWkMsRUF1TEFDLEVBdEtOLFNBQTZCTCxHQUMzQixJQUFJTSxFQUFNcEMsRUFBYzhCLEdBRXhCLElBQUtNLEVBQUssQ0FDUixHQUFJdEMsU0FBU3VDLGNBQ1hELEVBQU10QyxTQUFTdUMsY0FBY0QsUUFDeEIsQ0FDTCxJQUFJRSxFQUFVeEMsU0FBU3lDLHFCQUFxQixVQUN4Q0MsRUFBZ0JGLEVBQVFBLEVBQVEzQyxPQUFTLEdBRXpDNkMsSUFDRkosRUFBTUksRUFBY0osSUFFeEIsQ0FFQXBDLEVBQWM4QixHQUFZTSxDQUM1QixDQUVBLE9BQU8sU0FBVUssR0FDZixJQUFLTCxFQUNILE9BQU8sS0FHVCxJQUFJTSxFQUFjTixFQUFJekIsTUFBTSxrQkFDeEJnQyxFQUFXRCxHQUFlQSxFQUFZLEdBRTFDLE9BQUtDLEdBSUFGLEVBSUVBLEVBQVE5QixNQUFNLEtBQUtpQyxLQUFJLFNBQVVDLEdBQ3RDLElBQUlDLEVBQU0sSUFBSUMsT0FBTyxHQUFHM0IsT0FBT3VCLEVBQVUsVUFBVyxLQUNwRCxPQUFPNUMsRUFBYXFDLEVBQUlZLFFBQVFGLEVBQUssR0FBRzFCLE9BQU95QixFQUFRRyxRQUFRLGNBQWVMLEdBQVcsU0FDM0YsSUFWUyxDQUFDUCxFQUFJWSxRQUFRLE1BQU8sUUFXL0IsQ0FDRixDQStIcUJDLENBQW9CbkIsR0FvQnZDLE9BNU1nQkcsRUEwTGhCLFdBQ0UsSUFBSUcsRUFBTUQsRUFBYXpLLEVBQVFpTCxVQUMzQk8sRUE3RFIsU0FBcUJkLEdBQ25CLElBQUtBLEVBQ0gsT0FBTyxFQUdULElBQUlYLEVBQVczQixTQUFTaEQsaUJBQWlCLFFBQ3JDcUcsR0FBUyxFQXFCYixPQXBCQWxKLEVBQVF5SCxLQUFLRCxHQUFVLFNBQVVqQixHQUMvQixHQUFLQSxFQUFHRSxLQUFSLENBSUEsSUFBSUQsRUEzQlIsU0FBc0JDLEVBQU0wQixHQUMxQixJQUFJZ0IsRUFXSixPQVRBMUMsRUFBT1gsRUFBYVcsRUFBTSxDQUN4QjJDLFVBQVUsSUFHWmpCLEVBQUlrQixNQUFLLFNBQVU3QyxHQUNiQyxFQUFLSSxRQUFRc0IsSUFBUSxJQUN2QmdCLEVBQU0zQyxFQUVWLElBQ08yQyxDQUNULENBY2NHLENBQWEvQyxFQUFHRSxLQUFNMEIsR0FFM0J4QixFQUFhSCxLQUlDLElBQWZELEVBQUdPLFNBSUhOLElBQ0ZGLEVBQVVDLEVBQUlDLEdBQ2QwQyxHQUFTLEVBZFgsQ0FnQkYsSUFDT0EsQ0FDVCxDQWlDbUJLLENBQVlwQixHQUUzQixHQUFJMUssRUFBUStMLE9BR1YsT0FGQTFCLFFBQVFDLElBQUkseURBQ1pSLElBSUUwQixFQUNGbkIsUUFBUUMsSUFBSSxzQkFBdUJJLEVBQUlzQixLQUFLLE9BRTVDM0IsUUFBUUMsSUFBSSx3QkFDWlIsSUFFSixFQUV3QixHQTNNcEJVLEVBQVUsRUFDUCxXQUNMLElBQUl5QixFQUFPdkwsS0FFUHdMLEVBQU9DLFVBRVBDLEVBQWUsV0FDakIsT0FBTzdCLEVBQUc4QixNQUFNSixFQUFNQyxFQUN4QixFQUVBSSxhQUFhOUIsR0FDYkEsRUFBVXBHLFdBQVdnSSxFQWdNQyxHQS9MeEIsQ0FnTUYsQyxVQ3ZNQWxDLEVBQU9DLFFBQVUsU0FBVW9DLEdBR3pCLEdBRkFBLEVBQVlBLEVBQVV2RSxPQUVsQixVQUFVaUMsS0FBS3NDLEdBQ2pCLE9BQU9BLEVBR1QsSUFBSUMsR0FBd0MsSUFBN0JELEVBQVVuRCxRQUFRLE1BQWVtRCxFQUFVdEQsTUFBTSxNQUFNLEdBQUssS0FBTyxHQUM5RXdELEVBQWFGLEVBQVVqQixRQUFRLElBQUlELE9BQU9tQixFQUFVLEtBQU0sSUFBSXZELE1BQU0sS0FDcEV5RCxFQUFPRCxFQUFXLEdBQUduTSxjQUFjZ0wsUUFBUSxNQUFPLElBR3RELE9BRkFtQixFQUFXLEdBQUssR0FFVEQsRUFBV0UsRUFETUQsRUE1QkZFLFFBQU8sU0FBVUMsRUFBYW5ILEdBQ2xELE9BQVFBLEdBQ04sSUFBSyxLQUNIbUgsRUFBWUMsTUFDWixNQUVGLElBQUssSUFDSCxNQUVGLFFBQ0VELEVBQVkvTSxLQUFLNEYsR0FHckIsT0FBT21ILENBQ1QsR0FBRyxJQUFJWixLQUFLLElBZ0JkLEMsZ0JDOUJNLElBQUljLEVBQVksRUFBUSxJQUFSLENBQWtINUMsRUFBT3pILEdBQUksQ0FBQyxRQUFTLElBQ3ZKeUgsRUFBTzZDLElBQUlDLFFBQVFGLEdBQ25CNUMsRUFBTzZDLElBQUlFLFlBQU81SyxFQUFXeUssRSxnQkNGN0IsSUFBSUEsRUFBWSxFQUFRLElBQVIsQ0FBa0g1QyxFQUFPekgsR0FBSSxDQUFDLFFBQVMsSUFDdkp5SCxFQUFPNkMsSUFBSUMsUUFBUUYsR0FDbkI1QyxFQUFPNkMsSUFBSUUsWUFBTzVLLEVBQVd5SyxFLGdCQ0Y3QixJQUFJQSxFQUFZLEVBQVEsSUFBUixDQUFrSDVDLEVBQU96SCxHQUFJLENBQUMsUUFBUyxJQUN2SnlILEVBQU82QyxJQUFJQyxRQUFRRixHQUNuQjVDLEVBQU82QyxJQUFJRSxZQUFPNUssRUFBV3lLLEUsR0NML0JJLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0IvQyxHQUU1QixJQUFJZ0QsRUFBZUYsRUFBeUI5QyxHQUM1QyxRQUFxQi9ILElBQWpCK0ssRUFBNEIsQ0FDL0IsUUFBMkIvSyxJQUF2QitLLEVBQWFDLE1BQXFCLE1BQU1ELEVBQWFDLE1BQ3pELE9BQU9ELEVBQWFqRCxPQUNyQixDQUVBLElBQUlELEVBQVNnRCxFQUF5QjlDLEdBQVksQ0FDakQzSCxHQUFJMkgsRUFFSkQsUUFBUyxDQUFDLEdBSVgsSUFDQyxJQUFJbUQsRUFBYyxDQUFFN0ssR0FBSTJILEVBQVVGLE9BQVFBLEVBQVFxRCxRQUFTQyxFQUFvQnBELEdBQVdxRCxRQUFTTixHQUNuR0EsRUFBb0J2TixFQUFFMkMsU0FBUSxTQUFTbUwsR0FBV0EsRUFBUUosRUFBYyxJQUN4RXBELEVBQVNvRCxFQUFZcEQsT0FDckJvRCxFQUFZQyxRQUFRdkQsS0FBS0UsRUFBT0MsUUFBU0QsRUFBUUEsRUFBT0MsUUFBU21ELEVBQVlHLFFBSTlFLENBSEUsTUFBTXRNLEdBRVAsTUFEQStJLEVBQU9tRCxNQUFRbE0sRUFDVEEsQ0FDUCxDQUdBLE9BQU8rSSxFQUFPQyxPQUNmLENBR0FnRCxFQUFvQlEsRUFBSUgsRUFHeEJMLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0J2TixFQUFJLEdDdkN4QnVOLEVBQW9CVSxHQUFNQyxHQUViQSxFQUFVLElBQU1YLEVBQW9CWSxJQUFNLGlCQ0Z2RFosRUFBb0JhLFNBQVlGLEdBRXhCLFdDSFJYLEVBQW9CYyxLQUFPLElBQU8sUUFBVWQsRUFBb0JZLElBQU0sbUJDQXRFWixFQUFvQlksRUFBSSxJQUFNLHVCQ0E5QlosRUFBb0JlLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZDLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT3pOLE1BQVEsSUFBSTBOLFNBQVMsY0FBYixFQUdoQixDQUZFLE1BQU9qTixHQUNSLEdBQXNCLGlCQUFYUCxPQUFxQixPQUFPQSxNQUN4QyxDQUNBLENBUHVCLEdDQXhCdU0sRUFBb0JrQixFQUFJLENBQUNDLEVBQUtDLElBQVVoRyxPQUFPSSxVQUFVNkYsZUFBZXhFLEtBQUtzRSxFQUFLQyxHcEJBOUUzUCxFQUFhLENBQUMsRUFDZEMsRUFBb0IsV0FFeEJzTyxFQUFvQnNCLEVBQUksQ0FBQzFGLEVBQUsyRixFQUFNN0csRUFBS2lHLEtBQ3hDLEdBQUdsUCxFQUFXbUssR0FBUW5LLEVBQVdtSyxHQUFLbEosS0FBSzZPLE9BQTNDLENBQ0EsSUFBSUMsRUFBUUMsRUFDWixRQUFXdk0sSUFBUndGLEVBRUYsSUFEQSxJQUFJK0MsRUFBVXhDLFNBQVN5QyxxQkFBcUIsVUFDcENqTCxFQUFJLEVBQUdBLEVBQUlnTCxFQUFRM0MsT0FBUXJJLElBQUssQ0FDdkMsSUFBSWlQLEVBQUlqRSxFQUFRaEwsR0FDaEIsR0FBR2lQLEVBQUVDLGFBQWEsUUFBVS9GLEdBQU84RixFQUFFQyxhQUFhLGlCQUFtQmpRLEVBQW9CZ0osRUFBSyxDQUFFOEcsRUFBU0UsRUFBRyxLQUFPLENBQ3BILENBRUdGLElBQ0hDLEdBQWEsR0FDYkQsRUFBU3ZHLFNBQVMyRyxjQUFjLFdBRXpCQyxRQUFVLFFBQ2pCTCxFQUFPbkUsUUFBVSxJQUNiMkMsRUFBb0I4QixJQUN2Qk4sRUFBT08sYUFBYSxRQUFTL0IsRUFBb0I4QixJQUVsRE4sRUFBT08sYUFBYSxlQUFnQnJRLEVBQW9CZ0osR0FDeEQ4RyxFQUFPakUsSUFBTTNCLEdBRWRuSyxFQUFXbUssR0FBTyxDQUFDMkYsR0FDbkIsSUFBSVMsRUFBbUIsQ0FBQ0MsRUFBTUMsS0FFN0JWLEVBQU9XLFFBQVVYLEVBQU9ZLE9BQVMsS0FDakNqRCxhQUFhOUIsR0FDYixJQUFJZ0YsRUFBVTVRLEVBQVdtSyxHQUl6QixVQUhPbkssRUFBV21LLEdBQ2xCNEYsRUFBT25GLFlBQWNtRixFQUFPbkYsV0FBV0MsWUFBWWtGLEdBQ25EYSxHQUFXQSxFQUFRak4sU0FBU2dJLEdBQVFBLEVBQUc4RSxLQUNwQ0QsRUFBTSxPQUFPQSxFQUFLQyxFQUFNLEVBRXhCN0UsRUFBVXBHLFdBQVcrSyxFQUFpQjlQLEtBQUssVUFBTWdELEVBQVcsQ0FBRW9OLEtBQU0sVUFBV3hMLE9BQVEwSyxJQUFXLE1BQ3RHQSxFQUFPVyxRQUFVSCxFQUFpQjlQLEtBQUssS0FBTXNQLEVBQU9XLFNBQ3BEWCxFQUFPWSxPQUFTSixFQUFpQjlQLEtBQUssS0FBTXNQLEVBQU9ZLFFBQ25EWCxHQUFjeEcsU0FBU3NILEtBQUs3RixZQUFZOEUsRUFuQ2tCLENBbUNYLEUsTXFCdkNoRCxJQUlJZ0IsRUFZQUMsRUFDQUMsRUFqQkFDLEVBQW9CLENBQUMsRUFDckJDLEVBQW1CNUMsRUFBb0JTLEVBSXZDb0MsRUFBaUIsR0FHakJDLEVBQTJCLEdBQzNCQyxFQUFnQixPQUdoQkMsRUFBbUIsRUFDbkJDLEVBQTBCLEdBb0w5QixTQUFTQyxFQUFVQyxHQUNsQkosRUFBZ0JJLEVBR2hCLElBRkEsSUFBSUMsRUFBVSxHQUVMM1EsRUFBSSxFQUFHQSxFQUFJcVEsRUFBeUJoSSxPQUFRckksSUFDcEQyUSxFQUFRM1EsR0FBS3FRLEVBQXlCclEsR0FBR29LLEtBQUssS0FBTXNHLEdBRXJELE9BQU9FLFFBQVFDLElBQUlGLEVBQ3BCLENBRUEsU0FBU0csSUFDbUIsS0FBckJQLEdBQ0xFLEVBQVUsU0FBU00sTUFBSyxXQUN2QixHQUF5QixJQUFyQlIsRUFBd0IsQ0FDM0IsSUFBSTNOLEVBQU80TixFQUNYQSxFQUEwQixHQUMxQixJQUFLLElBQUl4USxFQUFJLEVBQUdBLEVBQUk0QyxFQUFLeUYsT0FBUXJJLElBQ2hDNEMsRUFBSzVDLElBRVAsQ0FDRCxHQUVGLENBeUJBLFNBQVNnUixFQUFTQyxHQUNqQixHQUFzQixTQUFsQlgsRUFDSCxNQUFNLElBQUl4USxNQUFNLDBDQUVqQixPQUFPMlEsRUFBVSxTQUNmTSxLQUFLeEQsRUFBb0IyRCxNQUN6QkgsTUFBSyxTQUFVSSxHQUNmLE9BQUtBLEVBUUVWLEVBQVUsV0FBV00sTUFBSyxXQUNoQyxJQUFJSyxFQUFpQixHQUdyQixPQUZBcEIsRUFBNkIsR0FFdEJZLFFBQVFDLElBQ2RsSSxPQUFPMEksS0FBSzlELEVBQW9CK0QsTUFBTXZFLFFBQU8sU0FDNUN3RSxFQUNBdEosR0FVQSxPQVJBc0YsRUFBb0IrRCxLQUFLckosR0FDeEJrSixFQUFPbkQsRUFDUG1ELEVBQU9LLEVBQ1BMLEVBQU9wRCxFQUNQd0QsRUFDQXZCLEVBQ0FvQixHQUVNRyxDQUNSLEdBQ0EsS0FDQ1IsTUFBSyxXQUNOLE9BN0M0QnBHLEVBNkNHLFdBQzlCLE9BQUlzRyxFQUNJUSxFQUFjUixHQUVkUixFQUFVLFNBQVNNLE1BQUssV0FDOUIsT0FBT0ssQ0FDUixHQUVGLEVBcERxQixJQUFyQmIsRUFBK0I1RixJQUM1QixJQUFJaUcsU0FBUSxTQUFVYyxHQUM1QmxCLEVBQXdCdlEsTUFBSyxXQUM1QnlSLEVBQVEvRyxJQUNULEdBQ0QsSUFORCxJQUFpQ0EsQ0FzRDdCLEdBQ0QsSUF0Q1E4RixFQUFVa0IsSUFBNEIsUUFBVSxRQUFRWixNQUM5RCxXQUNDLE9BQU8sSUFDUixHQW9DSCxHQUNGLENBRUEsU0FBU2EsRUFBU3hSLEdBQ2pCLE1BQXNCLFVBQWxCa1EsRUFDSU0sUUFBUWMsVUFBVVgsTUFBSyxXQUM3QixNQUFNLElBQUlqUixNQUNULG1EQUNDd1EsRUFDQSxJQUVILElBRU1tQixFQUFjclIsRUFDdEIsQ0FFQSxTQUFTcVIsRUFBY3JSLEdBQ3RCQSxFQUFVQSxHQUFXLENBQUMsRUFFdEJ1UixJQUVBLElBQUloQixFQUFVWCxFQUEyQjFFLEtBQUksU0FBVXdDLEdBQ3RELE9BQU9BLEVBQVExTixFQUNoQixJQUNBNFAsT0FBNkJ2TixFQUU3QixJQUFJb1AsRUFBU2xCLEVBQ1hyRixLQUFJLFNBQVVrRyxHQUNkLE9BQU9BLEVBQUUvRCxLQUNWLElBQ0NxRSxPQUFPQyxTQUVULEdBQUlGLEVBQU94SixPQUFTLEVBQ25CLE9BQU9vSSxFQUFVLFNBQVNNLE1BQUssV0FDOUIsTUFBTWMsRUFBTyxFQUNkLElBSUQsSUFBSUcsRUFBaUJ2QixFQUFVLFdBRS9CRSxFQUFRaE8sU0FBUSxTQUFVc1AsR0FDckJBLEVBQU83RSxTQUFTNkUsRUFBTzdFLFNBQzVCLElBR0EsSUFFSUssRUFGQXlFLEVBQWV6QixFQUFVLFNBR3pCMEIsRUFBYyxTQUFVQyxHQUN0QjNFLElBQU9BLEVBQVEyRSxFQUNyQixFQUVJQyxFQUFrQixHQVl0QixPQVhBMUIsRUFBUWhPLFNBQVEsU0FBVXNQLEdBQ3pCLEdBQUlBLEVBQU94RixNQUFPLENBQ2pCLElBQUk2RixFQUFVTCxFQUFPeEYsTUFBTTBGLEdBQzNCLEdBQUlHLEVBQ0gsSUFBSyxJQUFJdFMsRUFBSSxFQUFHQSxFQUFJc1MsRUFBUWpLLE9BQVFySSxJQUNuQ3FTLEVBQWdCcFMsS0FBS3FTLEVBQVF0UyxHQUdoQyxDQUNELElBRU80USxRQUFRQyxJQUFJLENBQUNtQixFQUFnQkUsSUFBZW5CLE1BQUssV0FFdkQsT0FBSXRELEVBQ0lnRCxFQUFVLFFBQVFNLE1BQUssV0FDN0IsTUFBTXRELENBQ1AsSUFHR3dDLEVBQ0l3QixFQUFjclIsR0FBUzJRLE1BQUssU0FBVW5PLEdBSTVDLE9BSEF5UCxFQUFnQjFQLFNBQVEsU0FBVTZILEdBQzdCNUgsRUFBSzRHLFFBQVFnQixHQUFZLEdBQUc1SCxFQUFLM0MsS0FBS3VLLEVBQzNDLElBQ081SCxDQUNSLElBR002TixFQUFVLFFBQVFNLE1BQUssV0FDN0IsT0FBT3NCLENBQ1IsR0FDRCxHQUNELENBRUEsU0FBU1YsSUFDUixHQUFJMUIsRUFXSCxPQVZLRCxJQUE0QkEsRUFBNkIsSUFDOURySCxPQUFPMEksS0FBSzlELEVBQW9CZ0YsTUFBTTVQLFNBQVEsU0FBVXNGLEdBQ3ZEZ0ksRUFBeUJ0TixTQUFRLFNBQVU2SCxHQUMxQytDLEVBQW9CZ0YsS0FBS3RLLEdBQ3hCdUMsRUFDQXdGLEVBRUYsR0FDRCxJQUNBQyxPQUEyQnhOLEdBQ3BCLENBRVQsQ0FqWEE4SyxFQUFvQmlGLEtBQU90QyxFQUUzQjNDLEVBQW9Cdk4sRUFBRUMsTUFBSyxTQUFVRyxHQUNwQyxJQStEOEJvSyxFQUFVaUksRUFDcENDLEVBQ0F2RixFQWpFQTdDLEVBQVNsSyxFQUFRa0ssT0FDakJ1RCxFQVdMLFNBQXVCQSxFQUFTckQsR0FDL0IsSUFBSWlJLEVBQUt0QyxFQUFpQjNGLEdBQzFCLElBQUtpSSxFQUFJLE9BQU81RSxFQUNoQixJQUFJbEQsRUFBSyxTQUFVZ0ksR0FDbEIsR0FBSUYsRUFBR3RGLElBQUl5RixPQUFRLENBQ2xCLEdBQUl6QyxFQUFpQndDLEdBQVUsQ0FDOUIsSUFBSUUsRUFBVTFDLEVBQWlCd0MsR0FBU0UsU0FDTCxJQUEvQkEsRUFBUXJKLFFBQVFnQixJQUNuQnFJLEVBQVE1UyxLQUFLdUssRUFFZixNQUNDNEYsRUFBaUIsQ0FBQzVGLEdBQ2xCdUYsRUFBcUI0QyxHQUVnQixJQUFsQ0YsRUFBR0ssU0FBU3RKLFFBQVFtSixJQUN2QkYsRUFBR0ssU0FBUzdTLEtBQUswUyxFQUVuQixNQUNDbEksUUFBUXNJLEtBQ1AsNEJBQ0NKLEVBQ0EsMEJBQ0FuSSxHQUVGNEYsRUFBaUIsR0FFbEIsT0FBT3ZDLEVBQVE4RSxFQUNoQixFQUNJSyxFQUEyQixTQUFVQyxHQUN4QyxNQUFPLENBQ05DLGNBQWMsRUFDZEMsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT3ZGLEVBQVFvRixFQUNoQixFQUNBSSxJQUFLLFNBQVVsTCxHQUNkMEYsRUFBUW9GLEdBQVE5SyxDQUNqQixFQUVGLEVBQ0EsSUFBSyxJQUFJOEssS0FBUXBGLEVBQ1psRixPQUFPSSxVQUFVNkYsZUFBZXhFLEtBQUt5RCxFQUFTb0YsSUFBa0IsTUFBVEEsR0FDMUR0SyxPQUFPMkssZUFBZTNJLEVBQUlzSSxFQUFNRCxFQUF5QkMsSUFNM0QsT0FIQXRJLEVBQUdwSixFQUFJLFNBQVUyTSxHQUNoQixPQXdJRixTQUE4QnFGLEdBQzdCLE9BQVFqRCxHQUNQLElBQUssUUFDSkcsRUFBVSxXQUVYLElBQUssVUFHSixPQUZBRixJQUNBZ0QsRUFBUXhDLEtBQUtELEVBQVNBLEdBQ2Z5QyxFQUNSLFFBQ0MsT0FBT0EsRUFFVixDQXBKU0MsQ0FBcUIzRixFQUFRdE0sRUFBRTJNLEdBQ3ZDLEVBQ092RCxDQUNSLENBNURlOEksQ0FBY3JULEVBQVF5TixRQUFTek4sRUFBUXlDLElBQ3JEeUgsRUFBTzZDLEtBNkR1QjNDLEVBN0RLcEssRUFBUXlDLEdBNkRINFAsRUE3RE9uSSxFQStEM0M2QyxFQUFNLENBRVR1RyxzQkFBdUIsQ0FBQyxFQUN4QkMsdUJBQXdCLENBQUMsRUFDekJDLHNCQUF1QixDQUFDLEVBQ3hCQyxlQUFlLEVBQ2ZDLGVBQWUsRUFDZkMsa0JBQWtCLEVBQ2xCQyxpQkFBa0IsR0FDbEJ0QixNQVZHQSxFQUFRM0MsSUFBdUJ2RixFQVdsQ3lKLGFBQWMsV0FDYjdELEVBQWlCcUMsRUFBR0ksUUFBUTFTLFFBQzVCNFAsRUFBcUIyQyxPQUFRalEsRUFBWStILEVBQ3pDK0MsRUFBb0IvQyxFQUNyQixFQUdBb0ksUUFBUSxFQUNSdkYsT0FBUSxTQUFVNkcsRUFBS0MsRUFBVUMsR0FDaEMsUUFBWTNSLElBQVJ5UixFQUFtQi9HLEVBQUkwRyxlQUFnQixPQUN0QyxHQUFtQixtQkFBUkssRUFBb0IvRyxFQUFJMEcsY0FBZ0JLLE9BQ25ELEdBQW1CLGlCQUFSQSxHQUE0QixPQUFSQSxFQUNuQyxJQUFLLElBQUlsVSxFQUFJLEVBQUdBLEVBQUlrVSxFQUFJN0wsT0FBUXJJLElBQy9CbU4sRUFBSXVHLHNCQUFzQlEsRUFBSWxVLElBQU1tVSxHQUFZLFdBQWEsRUFDN0RoSCxFQUFJd0csdUJBQXVCTyxFQUFJbFUsSUFBTW9VLE9BR3RDakgsRUFBSXVHLHNCQUFzQlEsR0FBT0MsR0FBWSxXQUFhLEVBQzFEaEgsRUFBSXdHLHVCQUF1Qk8sR0FBT0UsQ0FFcEMsRUFDQUMsUUFBUyxTQUFVSCxHQUNsQixRQUFZelIsSUFBUnlSLEVBQW1CL0csRUFBSTJHLGVBQWdCLE9BQ3RDLEdBQW1CLGlCQUFSSSxHQUE0QixPQUFSQSxFQUNuQyxJQUFLLElBQUlsVSxFQUFJLEVBQUdBLEVBQUlrVSxFQUFJN0wsT0FBUXJJLElBQy9CbU4sRUFBSXlHLHNCQUFzQk0sRUFBSWxVLEtBQU0sT0FDakNtTixFQUFJeUcsc0JBQXNCTSxJQUFPLENBQ3ZDLEVBQ0E5RyxRQUFTLFNBQVUrRyxHQUNsQmhILEVBQUk2RyxpQkFBaUIvVCxLQUFLa1UsRUFDM0IsRUFDQUcsa0JBQW1CLFNBQVVILEdBQzVCaEgsRUFBSTZHLGlCQUFpQi9ULEtBQUtrVSxFQUMzQixFQUNBSSxxQkFBc0IsU0FBVUosR0FDL0IsSUFBSUssRUFBTXJILEVBQUk2RyxpQkFBaUJ4SyxRQUFRMkssR0FDbkNLLEdBQU8sR0FBR3JILEVBQUk2RyxpQkFBaUJTLE9BQU9ELEVBQUssRUFDaEQsRUFDQUUsV0FBWSxXQUVYLE9BREE1VCxLQUFLaVQsa0JBQW1CLEVBQ2hCekQsR0FDUCxJQUFLLE9BQ0pOLEVBQTZCLEdBQzdCckgsT0FBTzBJLEtBQUs5RCxFQUFvQmdGLE1BQU01UCxTQUFRLFNBQVVzRixHQUN2RHNGLEVBQW9CZ0YsS0FBS3RLLEdBQ3hCdUMsRUFDQXdGLEVBRUYsSUFDQVMsRUFBVSxTQUNWLE1BQ0QsSUFBSyxRQUNKOUgsT0FBTzBJLEtBQUs5RCxFQUFvQmdGLE1BQU01UCxTQUFRLFNBQVVzRixHQUN2RHNGLEVBQW9CZ0YsS0FBS3RLLEdBQ3hCdUMsRUFDQXdGLEVBRUYsSUFDQSxNQUNELElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssU0FDSEMsRUFBMkJBLEdBQTRCLElBQUloUSxLQUMzRHVLLEdBT0osRUFHQW1LLE1BQU8zRCxFQUNQdkUsTUFBT21GLEVBQ1BnRCxPQUFRLFNBQVUvRixHQUNqQixJQUFLQSxFQUFHLE9BQU95QixFQUNmRCxFQUF5QnBRLEtBQUs0TyxFQUMvQixFQUNBZ0csaUJBQWtCLFNBQVVoRyxHQUMzQndCLEVBQXlCcFEsS0FBSzRPLEVBQy9CLEVBQ0FpRyxvQkFBcUIsU0FBVWpHLEdBQzlCLElBQUkyRixFQUFNbkUsRUFBeUI3RyxRQUFRcUYsR0FDdkMyRixHQUFPLEdBQUduRSxFQUF5Qm9FLE9BQU9ELEVBQUssRUFDcEQsRUFHQXJULEtBQU0rTyxFQUFrQjFGLElBRXpCdUYsT0FBcUJ0TixFQUNkMEssR0FwS1A3QyxFQUFPdUksUUFBVXpDLEVBQ2pCOUYsRUFBT3dJLFNBQVcsR0FDbEIxQyxFQUFpQixHQUNqQmhRLEVBQVF5TixRQUFVQSxDQUNuQixJQUVBTixFQUFvQitELEtBQU8sQ0FBQyxFQUM1Qi9ELEVBQW9CZ0YsS0FBTyxDQUFDLEMsV0NqQzVCLElBQUl3QyxFQUNBeEgsRUFBb0JlLEVBQUUwRyxnQkFBZUQsRUFBWXhILEVBQW9CZSxFQUFFMkcsU0FBVyxJQUN0RixJQUFJek0sRUFBVytFLEVBQW9CZSxFQUFFOUYsU0FDckMsSUFBS3VNLEdBQWF2TSxJQUNiQSxFQUFTdUMsZ0JBQ1pnSyxFQUFZdk0sRUFBU3VDLGNBQWNELE1BQy9CaUssR0FBVyxDQUNmLElBQUkvSixFQUFVeEMsRUFBU3lDLHFCQUFxQixVQUN6Q0QsRUFBUTNDLFNBQVEwTSxFQUFZL0osRUFBUUEsRUFBUTNDLE9BQVMsR0FBR3lDLElBQzVELENBSUQsSUFBS2lLLEVBQVcsTUFBTSxJQUFJalYsTUFBTSx5REFDaENpVixFQUFZQSxFQUFVckosUUFBUSxPQUFRLElBQUlBLFFBQVEsUUFBUyxJQUFJQSxRQUFRLFlBQWEsS0FDcEY2QixFQUFvQjJILEVBQUlILEMsS3JCZnBCN1YsRUFBbUIsQ0FBQ2dQLEVBQVNpSCxFQUFVekQsRUFBUzBELEtBQ25ELElBQUlDLEVBQVU3TSxTQUFTMkcsY0FBYyxRQXdCckMsT0F0QkFrRyxFQUFRQyxJQUFNLGFBQ2RELEVBQVF4RixLQUFPLFdBaUJmd0YsRUFBUTNGLFFBQVUyRixFQUFRMUYsT0FoQkpGLElBR3JCLEdBREE0RixFQUFRM0YsUUFBVTJGLEVBQVExRixPQUFTLEtBQ2hCLFNBQWZGLEVBQU1JLEtBQ1Q2QixRQUNNLENBQ04sSUFBSTZELEVBQVk5RixJQUF5QixTQUFmQSxFQUFNSSxLQUFrQixVQUFZSixFQUFNSSxNQUNoRTJGLEVBQVcvRixHQUFTQSxFQUFNcEwsUUFBVW9MLEVBQU1wTCxPQUFPK0UsTUFBUStMLEVBQ3pEL0MsRUFBTSxJQUFJdFMsTUFBTSxxQkFBdUJvTyxFQUFVLGNBQWdCc0gsRUFBVyxLQUNoRnBELEVBQUl6USxLQUFPLHdCQUNYeVEsRUFBSXZDLEtBQU8wRixFQUNYbkQsRUFBSU8sUUFBVTZDLEVBQ2RILEVBQVF6TCxXQUFXQyxZQUFZd0wsR0FDL0JELEVBQU9oRCxFQUNSLEdBR0RpRCxFQUFRak0sS0FBTytMLEVBRWYzTSxTQUFTc0gsS0FBSzdGLFlBQVlvTCxHQUNuQkEsQ0FBTyxFQUVYbFcsRUFBaUIsQ0FBQ2lLLEVBQU0rTCxLQUUzQixJQURBLElBQUlNLEVBQW1Cak4sU0FBU3lDLHFCQUFxQixRQUM3Q2pMLEVBQUksRUFBR0EsRUFBSXlWLEVBQWlCcE4sT0FBUXJJLElBQUssQ0FDaEQsSUFDSTBWLEdBREFDLEVBQU1GLEVBQWlCelYsSUFDUmtQLGFBQWEsY0FBZ0J5RyxFQUFJekcsYUFBYSxRQUNqRSxHQUFlLGVBQVp5RyxFQUFJTCxNQUF5QkksSUFBYXRNLEdBQVFzTSxJQUFhUCxHQUFXLE9BQU9RLENBQ3JGLENBQ0EsSUFBSUMsRUFBb0JwTixTQUFTeUMscUJBQXFCLFNBQ3RELElBQVFqTCxFQUFJLEVBQUdBLEVBQUk0VixFQUFrQnZOLE9BQVFySSxJQUFLLENBQ2pELElBQUkyVixFQUVKLElBRElELEdBREFDLEVBQU1DLEVBQWtCNVYsSUFDVGtQLGFBQWEsZ0JBQ2hCOUYsR0FBUXNNLElBQWFQLEVBQVUsT0FBT1EsQ0FDdkQsR0FZR3ZXLEVBQVUsR0FDVkMsRUFBVSxHQUNWQyxFQUFnQmMsSUFDWixDQUFFZ04sUUFBUyxLQUNqQixJQUFJLElBQUlwTixFQUFJLEVBQUdBLEVBQUlaLEVBQVFpSixPQUFRckksSUFBSyxDQUN2QyxJQUFJNlYsRUFBU3pXLEVBQVFZLEdBQ2xCNlYsRUFBT2pNLFlBQVlpTSxFQUFPak0sV0FBV0MsWUFBWWdNLEVBQ3JELENBQ0F6VyxFQUFRaUosT0FBUyxDQUFDLEVBQ2hCb0UsTUFBTyxLQUNULElBQUksSUFBSXpNLEVBQUksRUFBR0EsRUFBSVgsRUFBUWdKLE9BQVFySSxJQUFLWCxFQUFRVyxHQUFHc1YsSUFBTSxhQUN6RGpXLEVBQVFnSixPQUFTLENBQUMsSUFHcEJrRixFQUFvQitELEtBQUt3RSxRQUFVLENBQUNDLEVBQVVDLEVBQWVDLEVBQWdCMUUsRUFBVTJFLEVBQWVDLEtBQ3JHRCxFQUFjalcsS0FBS1gsR0FDbkJ5VyxFQUFTcFQsU0FBU3VMLElBQ2pCLElBQUk5RSxFQUFPbUUsRUFBb0JhLFNBQVNGLEdBQ3BDaUgsRUFBVzVILEVBQW9CMkgsRUFBSTlMLEVBQ25DeU0sRUFBUzFXLEVBQWVpSyxFQUFNK0wsR0FDOUJVLEdBQ0p0RSxFQUFTdFIsS0FBSyxJQUFJMlEsU0FBUSxDQUFDYyxFQUFTMEQsS0FDbkMsSUFBSU8sRUFBTXpXLEVBQWlCZ1AsRUFBU2lILEdBQVUsS0FDN0NRLEVBQUlTLEdBQUssUUFDVFQsRUFBSUwsSUFBTSxVQUNWNUQsR0FBUyxHQUNQMEQsR0FDSGhXLEVBQVFhLEtBQUs0VixHQUNieFcsRUFBUVksS0FBSzBWLEVBQUksSUFDZixHQUNGLEUsTXNCNUVILElBVUlVLEVBd0NBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQXJEQUMsRUFBa0JuSixFQUFvQm9KLFdBQWFwSixFQUFvQm9KLFlBQWMsQ0FDeEYsSUFBSyxHQVVGQyxFQUF3QixDQUFDLEVBQzdCLFNBQVNDLEVBQWdCM0ksRUFBU2lJLEdBRWpDLE9BREFFLEVBQTRCRixFQUNyQixJQUFJdkYsU0FBUSxDQUFDYyxFQUFTMEQsS0FDNUJ3QixFQUFzQjFJLEdBQVd3RCxFQUVqQyxJQUFJdkksRUFBTW9FLEVBQW9CMkgsRUFBSTNILEVBQW9CVSxHQUFHQyxHQUVyRFQsRUFBUSxJQUFJM04sTUFhaEJ5TixFQUFvQnNCLEVBQUUxRixHQVpGc0csSUFDbkIsR0FBR21ILEVBQXNCMUksR0FBVSxDQUNsQzBJLEVBQXNCMUksUUFBV3pMLEVBQ2pDLElBQUk4UyxFQUFZOUYsSUFBeUIsU0FBZkEsRUFBTUksS0FBa0IsVUFBWUosRUFBTUksTUFDaEVpSCxFQUFVckgsR0FBU0EsRUFBTXBMLFFBQVVvTCxFQUFNcEwsT0FBT3lHLElBQ3BEMkMsRUFBTXNKLFFBQVUsNEJBQThCN0ksRUFBVSxjQUFnQnFILEVBQVksS0FBT3VCLEVBQVUsSUFDckdySixFQUFNd0YsS0FBTyxpQkFDYnhGLEVBQU1vQyxLQUFPMEYsRUFDYjlILEVBQU1rRixRQUFVbUUsRUFDaEIxQixFQUFPM0gsRUFDUixJQUV1QyxHQUUxQyxDQW9CQSxTQUFTbk8sRUFBYWMsR0FHckIsU0FBUzRXLEVBQXlCQyxHQVVqQyxJQVRBLElBQUk1RSxFQUFrQixDQUFDNEUsR0FDbkJDLEVBQXVCLENBQUMsRUFFeEJDLEVBQVE5RSxFQUFnQi9HLEtBQUksU0FBVXpJLEdBQ3pDLE1BQU8sQ0FDTnVVLE1BQU8sQ0FBQ3ZVLEdBQ1JBLEdBQUlBLEVBRU4sSUFDT3NVLEVBQU05TyxPQUFTLEdBQUcsQ0FDeEIsSUFBSWdQLEVBQVlGLEVBQU1sSyxNQUNsQnpDLEVBQVc2TSxFQUFVeFUsR0FDckJ1VSxFQUFRQyxFQUFVRCxNQUNsQjlNLEVBQVNpRCxFQUFvQlMsRUFBRXhELEdBQ25DLEdBQ0VGLEtBQ0FBLEVBQU82QyxJQUFJMEcsZUFBa0J2SixFQUFPNkMsSUFBSTRHLGtCQUYxQyxDQUtBLEdBQUl6SixFQUFPNkMsSUFBSTJHLGNBQ2QsTUFBTyxDQUNOakUsS0FBTSxnQkFDTnVILE1BQU9BLEVBQ1A1TSxTQUFVQSxHQUdaLEdBQUlGLEVBQU82QyxJQUFJdUYsTUFDZCxNQUFPLENBQ043QyxLQUFNLGFBQ051SCxNQUFPQSxFQUNQNU0sU0FBVUEsR0FHWixJQUFLLElBQUl4SyxFQUFJLEVBQUdBLEVBQUlzSyxFQUFPdUksUUFBUXhLLE9BQVFySSxJQUFLLENBQy9DLElBQUlzWCxFQUFXaE4sRUFBT3VJLFFBQVE3UyxHQUMxQnVYLEVBQVNoSyxFQUFvQlMsRUFBRXNKLEdBQ25DLEdBQUtDLEVBQUwsQ0FDQSxHQUFJQSxFQUFPcEssSUFBSXlHLHNCQUFzQnBKLEdBQ3BDLE1BQU8sQ0FDTnFGLEtBQU0sV0FDTnVILE1BQU9BLEVBQU10TixPQUFPLENBQUN3TixJQUNyQjlNLFNBQVVBLEVBQ1Y4TSxTQUFVQSxJQUcrQixJQUF2Q2pGLEVBQWdCN0ksUUFBUThOLEtBQ3hCQyxFQUFPcEssSUFBSXVHLHNCQUFzQmxKLElBQy9CME0sRUFBcUJJLEtBQ3pCSixFQUFxQkksR0FBWSxJQUNsQ0UsRUFBWU4sRUFBcUJJLEdBQVcsQ0FBQzlNLGFBR3ZDME0sRUFBcUJJLEdBQzVCakYsRUFBZ0JwUyxLQUFLcVgsR0FDckJILEVBQU1sWCxLQUFLLENBQ1ZtWCxNQUFPQSxFQUFNdE4sT0FBTyxDQUFDd04sSUFDckJ6VSxHQUFJeVUsS0FwQmdCLENBc0J0QixDQXhDUyxDQXlDVixDQUVBLE1BQU8sQ0FDTnpILEtBQU0sV0FDTnJGLFNBQVV5TSxFQUNWNUUsZ0JBQWlCQSxFQUNqQjZFLHFCQUFzQkEsRUFFeEIsQ0FFQSxTQUFTTSxFQUFZQyxFQUFHQyxHQUN2QixJQUFLLElBQUkxWCxFQUFJLEVBQUdBLEVBQUkwWCxFQUFFclAsT0FBUXJJLElBQUssQ0FDbEMsSUFBSTZGLEVBQU82UixFQUFFMVgsSUFDWSxJQUFyQnlYLEVBQUVqTyxRQUFRM0QsSUFBYzRSLEVBQUV4WCxLQUFLNEYsRUFDcEMsQ0FDRCxDQTdFSTBILEVBQW9Cb0ssVUFBVXBLLEVBQW9Cb0ssRUFBRUMsU0FDeER0QixPQUFzQjdULEVBZ0Z0QixJQUFJeVUsRUFBdUIsQ0FBQyxFQUN4QjdFLEVBQWtCLEdBQ2xCd0YsRUFBZ0IsQ0FBQyxFQUVqQkMsRUFBd0IsU0FBK0J4TixHQUMxREcsUUFBUXNJLEtBQ1AsNEJBQThCekksRUFBT3pILEdBQUssdUJBRTVDLEVBRUEsSUFBSyxJQUFJMkgsS0FBWStMLEVBQ3BCLEdBQUloSixFQUFvQmtCLEVBQUU4SCxFQUFlL0wsR0FBVyxDQUNuRCxJQUVJeUgsRUFGQThGLEVBQW1CeEIsRUFBYy9MLEdBWWpDd04sR0FBYSxFQUNiQyxHQUFVLEVBQ1ZDLEdBQVksRUFDWkMsRUFBWSxHQUloQixRQWZDbEcsRUFERzhGLEVBQ01mLEVBQXlCeE0sR0FFekIsQ0FDUnFGLEtBQU0sV0FDTnJGLFNBQVVBLElBUUQ0TSxRQUNWZSxFQUFZLHlCQUEyQmxHLEVBQU9tRixNQUFNaEwsS0FBSyxTQUVsRDZGLEVBQU9wQyxNQUNkLElBQUssZ0JBQ0F6UCxFQUFRZ1ksWUFBWWhZLEVBQVFnWSxXQUFXbkcsR0FDdEM3UixFQUFRaVksaUJBQ1pMLEVBQWEsSUFBSWxZLE1BQ2hCLG9DQUNDbVMsRUFBT3pILFNBQ1AyTixJQUVILE1BQ0QsSUFBSyxXQUNBL1gsRUFBUWdZLFlBQVloWSxFQUFRZ1ksV0FBV25HLEdBQ3RDN1IsRUFBUWlZLGlCQUNaTCxFQUFhLElBQUlsWSxNQUNoQiwyQ0FDQ21TLEVBQU96SCxTQUNQLE9BQ0F5SCxFQUFPcUYsU0FDUGEsSUFFSCxNQUNELElBQUssYUFDQS9YLEVBQVFrWSxjQUFjbFksRUFBUWtZLGFBQWFyRyxHQUMxQzdSLEVBQVFtWSxtQkFDWlAsRUFBYSxJQUFJbFksTUFDaEIsbUJBQXFCMEssRUFBVyxtQkFBcUIyTixJQUV2RCxNQUNELElBQUssV0FDQS9YLEVBQVFvWSxZQUFZcFksRUFBUW9ZLFdBQVd2RyxHQUMzQ2dHLEdBQVUsRUFDVixNQUNELElBQUssV0FDQTdYLEVBQVFxWSxZQUFZclksRUFBUXFZLFdBQVd4RyxHQUMzQ2lHLEdBQVksRUFDWixNQUNELFFBQ0MsTUFBTSxJQUFJcFksTUFBTSxvQkFBc0JtUyxFQUFPcEMsTUFFL0MsR0FBSW1JLEVBQ0gsTUFBTyxDQUNOdkssTUFBT3VLLEdBR1QsR0FBSUMsRUFHSCxJQUFLek4sS0FGTHFOLEVBQWNyTixHQUFZdU4sRUFDMUJQLEVBQVluRixFQUFpQkosRUFBT0ksaUJBQ25CSixFQUFPaUYscUJBQ25CM0osRUFBb0JrQixFQUFFd0QsRUFBT2lGLHFCQUFzQjFNLEtBQ2pEME0sRUFBcUIxTSxLQUN6QjBNLEVBQXFCMU0sR0FBWSxJQUNsQ2dOLEVBQ0NOLEVBQXFCMU0sR0FDckJ5SCxFQUFPaUYscUJBQXFCMU0sS0FLNUIwTixJQUNIVixFQUFZbkYsRUFBaUIsQ0FBQ0osRUFBT3pILFdBQ3JDcU4sRUFBY3JOLEdBQVlzTixFQUU1QixDQUVEdkIsT0FBZ0I5VCxFQUloQixJQURBLElBb0JJaVcsRUFwQkFDLEVBQThCLEdBQ3pCQyxFQUFJLEVBQUdBLEVBQUl2RyxFQUFnQmhLLE9BQVF1USxJQUFLLENBQ2hELElBQUlDLEVBQW1CeEcsRUFBZ0J1RyxHQUNuQ3RPLEVBQVNpRCxFQUFvQlMsRUFBRTZLLEdBRWxDdk8sSUFDQ0EsRUFBTzZDLElBQUkwRyxlQUFpQnZKLEVBQU82QyxJQUFJdUYsUUFFeENtRixFQUFjZ0IsS0FBc0JmLElBRW5DeE4sRUFBTzZDLElBQUk0RyxrQkFFWjRFLEVBQTRCMVksS0FBSyxDQUNoQ3FLLE9BQVF1TyxFQUNSaEwsUUFBU3ZELEVBQU82QyxJQUFJOEcsYUFDcEJHLGFBQWM5SixFQUFPNkMsSUFBSTBHLGVBRzVCLENBSUEsTUFBTyxDQUNOekcsUUFBUyxXQU1SLElBQUlvSCxFQUxKZ0MsRUFBMkI3VCxTQUFRLFNBQVV1TCxVQUNyQ3dJLEVBQWdCeEksRUFDeEIsSUFDQXNJLE9BQTZCL1QsRUFJN0IsSUFEQSxJQW9DSXFXLEVBcENBM0IsRUFBUTlFLEVBQWdCbFMsUUFDckJnWCxFQUFNOU8sT0FBUyxHQUFHLENBQ3hCLElBQUltQyxFQUFXMk0sRUFBTWxLLE1BQ2pCM0MsRUFBU2lELEVBQW9CUyxFQUFFeEQsR0FDbkMsR0FBS0YsRUFBTCxDQUVBLElBQUluSixFQUFPLENBQUMsRUFHUjRYLEVBQWtCek8sRUFBTzZDLElBQUk2RyxpQkFDakMsSUFBSzRFLEVBQUksRUFBR0EsRUFBSUcsRUFBZ0IxUSxPQUFRdVEsSUFDdkNHLEVBQWdCSCxHQUFHeE8sS0FBSyxLQUFNakosR0FjL0IsSUFaQW9NLEVBQW9CaUYsS0FBS2hJLEdBQVlySixFQUdyQ21KLEVBQU82QyxJQUFJeUYsUUFBUyxTQUdickYsRUFBb0JTLEVBQUV4RCxVQUd0QjBNLEVBQXFCMU0sR0FHdkJvTyxFQUFJLEVBQUdBLEVBQUl0TyxFQUFPd0ksU0FBU3pLLE9BQVF1USxJQUFLLENBQzVDLElBQUlJLEVBQVF6TCxFQUFvQlMsRUFBRTFELEVBQU93SSxTQUFTOEYsSUFDN0NJLElBQ0x4RSxFQUFNd0UsRUFBTW5HLFFBQVFySixRQUFRZ0IsS0FDakIsR0FDVndPLEVBQU1uRyxRQUFRNEIsT0FBT0QsRUFBSyxFQUU1QixDQTVCcUIsQ0E2QnRCLENBSUEsSUFBSyxJQUFJcUUsS0FBb0IzQixFQUM1QixHQUFJM0osRUFBb0JrQixFQUFFeUksRUFBc0IyQixLQUMvQ3ZPLEVBQVNpRCxFQUFvQlMsRUFBRTZLLElBSTlCLElBRkFILEVBQ0N4QixFQUFxQjJCLEdBQ2pCRCxFQUFJLEVBQUdBLEVBQUlGLEVBQTJCclEsT0FBUXVRLElBQ2xERSxFQUFhSixFQUEyQkUsSUFDeENwRSxFQUFNbEssRUFBT3dJLFNBQVN0SixRQUFRc1AsS0FDbkIsR0FBR3hPLEVBQU93SSxTQUFTMkIsT0FBT0QsRUFBSyxFQUsvQyxFQUNBL0gsTUFBTyxTQUFVMEYsR0FFaEIsSUFBSyxJQUFJOEUsS0FBa0JZLEVBQ3RCdEssRUFBb0JrQixFQUFFb0osRUFBZVosS0FDeEMxSixFQUFvQlEsRUFBRWtKLEdBQWtCWSxFQUFjWixJQUt4RCxJQUFLLElBQUlqWCxFQUFJLEVBQUdBLEVBQUl5VyxFQUFxQnBPLE9BQVFySSxJQUNoRHlXLEVBQXFCelcsR0FBR3VOLEdBSXpCLElBQUssSUFBSXNMLEtBQW9CM0IsRUFDNUIsR0FBSTNKLEVBQW9Ca0IsRUFBRXlJLEVBQXNCMkIsR0FBbUIsQ0FDbEUsSUFBSXZPLEVBQVNpRCxFQUFvQlMsRUFBRTZLLEdBQ25DLEdBQUl2TyxFQUFRLENBQ1hvTyxFQUNDeEIsRUFBcUIyQixHQUl0QixJQUhBLElBQUlJLEVBQVksR0FDWkMsRUFBZ0IsR0FDaEJDLEVBQTJCLEdBQ3RCUCxFQUFJLEVBQUdBLEVBQUlGLEVBQTJCclEsT0FBUXVRLElBQUssQ0FDM0QsSUFBSUUsRUFBYUosRUFBMkJFLEdBQ3hDUSxFQUNIOU8sRUFBTzZDLElBQUl1RyxzQkFBc0JvRixHQUM5QjFFLEVBQ0g5SixFQUFPNkMsSUFBSXdHLHVCQUF1Qm1GLEdBQ25DLEdBQUlNLEVBQWdCLENBQ25CLElBQTJDLElBQXZDSCxFQUFVelAsUUFBUTRQLEdBQXdCLFNBQzlDSCxFQUFVaFosS0FBS21aLEdBQ2ZGLEVBQWNqWixLQUFLbVUsR0FDbkIrRSxFQUF5QmxaLEtBQUs2WSxFQUMvQixDQUNELENBQ0EsSUFBSyxJQUFJTyxFQUFJLEVBQUdBLEVBQUlKLEVBQVU1USxPQUFRZ1IsSUFDckMsSUFDQ0osRUFBVUksR0FBR2pQLEtBQUssS0FBTXNPLEVBb0N6QixDQW5DRSxNQUFPdEcsR0FDUixHQUFnQyxtQkFBckI4RyxFQUFjRyxHQUN4QixJQUNDSCxFQUFjRyxHQUFHakgsRUFBSyxDQUNyQjVILFNBQVVxTyxFQUNWUyxhQUFjSCxFQUF5QkUsSUFnQnpDLENBZEUsTUFBT0UsR0FDSm5aLEVBQVFvWixXQUNYcFosRUFBUW9aLFVBQVUsQ0FDakIzSixLQUFNLCtCQUNOckYsU0FBVXFPLEVBQ1ZTLGFBQWNILEVBQXlCRSxHQUN2QzVMLE1BQU84TCxFQUNQRSxjQUFlckgsSUFHWmhTLEVBQVFzWixnQkFDWnZILEVBQVlvSCxHQUNacEgsRUFBWUMsR0FFZCxNQUVJaFMsRUFBUW9aLFdBQ1hwWixFQUFRb1osVUFBVSxDQUNqQjNKLEtBQU0saUJBQ05yRixTQUFVcU8sRUFDVlMsYUFBY0gsRUFBeUJFLEdBQ3ZDNUwsTUFBTzJFLElBR0poUyxFQUFRc1osZUFDWnZILEVBQVlDLEVBR2YsQ0FFRixDQUNELENBSUQsSUFBSyxJQUFJM0QsRUFBSSxFQUFHQSxFQUFJa0ssRUFBNEJ0USxPQUFRb0csSUFBSyxDQUM1RCxJQUFJNUksRUFBTzhTLEVBQTRCbEssR0FDbkNqRSxFQUFXM0UsRUFBS3lFLE9BQ3BCLElBQ0N6RSxFQUFLZ0ksUUFBUXJELEVBa0NkLENBakNFLE1BQU80SCxHQUNSLEdBQWlDLG1CQUF0QnZNLEVBQUt1TyxhQUNmLElBQ0N2TyxFQUFLdU8sYUFBYWhDLEVBQUssQ0FDdEI1SCxTQUFVQSxFQUNWRixPQUFRaUQsRUFBb0JTLEVBQUV4RCxJQWVoQyxDQWJFLE1BQU8rTyxHQUNKblosRUFBUW9aLFdBQ1hwWixFQUFRb1osVUFBVSxDQUNqQjNKLEtBQU0sb0NBQ05yRixTQUFVQSxFQUNWaUQsTUFBTzhMLEVBQ1BFLGNBQWVySCxJQUdaaFMsRUFBUXNaLGdCQUNadkgsRUFBWW9ILEdBQ1pwSCxFQUFZQyxHQUVkLE1BRUloUyxFQUFRb1osV0FDWHBaLEVBQVFvWixVQUFVLENBQ2pCM0osS0FBTSxzQkFDTnJGLFNBQVVBLEVBQ1ZpRCxNQUFPMkUsSUFHSmhTLEVBQVFzWixlQUNadkgsRUFBWUMsRUFHZixDQUNELENBRUEsT0FBT0MsQ0FDUixFQUVGLENBclpBaEcsS0FBOEIsd0JBQUksQ0FBQzZCLEVBQVN5TCxFQUFhQyxLQUN4RCxJQUFJLElBQUlwUCxLQUFZbVAsRUFDaEJwTSxFQUFvQmtCLEVBQUVrTCxFQUFhblAsS0FDckMrTCxFQUFjL0wsR0FBWW1QLEVBQVluUCxHQUNuQzZMLEdBQTJCQSxFQUEwQnBXLEtBQUt1SyxJQUc1RG9QLEdBQVNuRCxFQUFxQnhXLEtBQUsyWixHQUNuQ2hELEVBQXNCMUksS0FDeEIwSSxFQUFzQjFJLEtBQ3RCMEksRUFBc0IxSSxRQUFXekwsRUFDbEMsRUEyWUQ4SyxFQUFvQmdGLEtBQUtzSCxNQUFRLFNBQVVyUCxFQUFVMEwsR0FDL0NLLElBQ0pBLEVBQWdCLENBQUMsRUFDakJFLEVBQXVCLEdBQ3ZCRCxFQUE2QixHQUM3Qk4sRUFBY2pXLEtBQUtYLElBRWZpTyxFQUFvQmtCLEVBQUU4SCxFQUFlL0wsS0FDekMrTCxFQUFjL0wsR0FBWStDLEVBQW9CUSxFQUFFdkQsR0FFbEQsRUFDQStDLEVBQW9CK0QsS0FBS3VJLE1BQVEsU0FDaEM5RCxFQUNBQyxFQUNBQyxFQUNBMUUsRUFDQTJFLEVBQ0FDLEdBRUFELEVBQWNqVyxLQUFLWCxHQUNuQmdYLEVBQXNCLENBQUMsRUFDdkJFLEVBQTZCUixFQUM3Qk8sRUFBZ0JOLEVBQWVsSixRQUFPLFNBQVUyQixFQUFLekcsR0FFcEQsT0FEQXlHLEVBQUl6RyxJQUFPLEVBQ0p5RyxDQUNSLEdBQUcsQ0FBQyxHQUNKK0gsRUFBdUIsR0FDdkJWLEVBQVNwVCxTQUFRLFNBQVV1TCxHQUV6QlgsRUFBb0JrQixFQUFFaUksRUFBaUJ4SSxTQUNWekwsSUFBN0JpVSxFQUFnQnhJLElBRWhCcUQsRUFBU3RSLEtBQUs0VyxFQUFnQjNJLEVBQVNpSSxJQUN2Q0csRUFBb0JwSSxJQUFXLEdBRS9Cb0ksRUFBb0JwSSxJQUFXLENBRWpDLElBQ0lYLEVBQW9Cb0ssSUFDdkJwSyxFQUFvQm9LLEVBQUVDLFNBQVcsU0FBVTFKLEVBQVNxRCxHQUVsRCtFLEdBQ0EvSSxFQUFvQmtCLEVBQUU2SCxFQUFxQnBJLEtBQzFDb0ksRUFBb0JwSSxLQUVyQnFELEVBQVN0UixLQUFLNFcsRUFBZ0IzSSxJQUM5Qm9JLEVBQW9CcEksSUFBVyxFQUVqQyxFQUVGLEVBRUFYLEVBQW9CMkQsS0FBTyxLQUMxQixHQUFxQixvQkFBVjRJLE1BQXVCLE1BQU0sSUFBSWhhLE1BQU0sc0NBQ2xELE9BQU9nYSxNQUFNdk0sRUFBb0IySCxFQUFJM0gsRUFBb0JjLFFBQVEwQyxNQUFNZ0osSUFDdEUsR0FBdUIsTUFBcEJBLEVBQVNuRixPQUFaLENBQ0EsSUFBSW1GLEVBQVNDLEdBQUksTUFBTSxJQUFJbGEsTUFBTSxtQ0FBcUNpYSxFQUFTRSxZQUMvRSxPQUFPRixFQUFTRyxNQUZrQixDQUVaLEdBQ3JCLEMsS0N0ZnVCM00sRUFBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Fqcy1kbmQvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2Fqcy1kbmQvd2VicGFjay9ydW50aW1lL2NzcyBsb2FkaW5nIiwid2VicGFjazovL2Fqcy1kbmQvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL25hdGl2ZS5qcyIsIndlYnBhY2s6Ly9hanMtZG5kLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCJ3ZWJwYWNrOi8vYWpzLWRuZC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL2Fqcy1kbmQvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL2Fqcy1kbmQvLi9zcmMvd2lkZ2V0cy90YXNrc2xpc3Qvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9hanMtZG5kLy4vc3JjL3dpZGdldHMvdGFza3NsaXN0L3Rhc2tzbGlzdC5qcyIsIndlYnBhY2s6Ly9hanMtZG5kLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly9hanMtZG5kLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwid2VicGFjazovL2Fqcy1kbmQvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvbm9ybWFsaXplLXVybC5qcyIsIndlYnBhY2s6Ly9hanMtZG5kLy4vc3JjL2Nzcy9ib290c3RyYXAuY3NzP2I5OTUiLCJ3ZWJwYWNrOi8vYWpzLWRuZC8uL3NyYy9jc3Mvc3R5bGUuY3NzPzZiN2IiLCJ3ZWJwYWNrOi8vYWpzLWRuZC8uL3NyYy93aWRnZXRzL3Rhc2tzbGlzdC90YXNrc2xpc3QuY3NzP2ZlMDgiLCJ3ZWJwYWNrOi8vYWpzLWRuZC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hanMtZG5kL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWpzLWRuZC93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Fqcy1kbmQvd2VicGFjay9ydW50aW1lL2dldCB1cGRhdGUgbWFuaWZlc3QgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWpzLWRuZC93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vYWpzLWRuZC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Fqcy1kbmQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9hanMtZG5kL3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL2Fqcy1kbmQvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYWpzLWRuZC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9hanMtZG5kL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJhanMtZG5kOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJ2YXIgY3JlYXRlU3R5bGVzaGVldCA9IChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSAoaHJlZiwgZnVsbGhyZWYpID0+IHtcblx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcblx0fVxuXHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcblx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG5cdH1cbn07XG52YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG5vIGNodW5rIGxvYWRpbmdcblxudmFyIG9sZFRhZ3MgPSBbXTtcbnZhciBuZXdUYWdzID0gW107XG52YXIgYXBwbHlIYW5kbGVyID0gKG9wdGlvbnMpID0+IHtcblx0cmV0dXJuIHsgZGlzcG9zZTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvbGRUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgb2xkVGFnID0gb2xkVGFnc1tpXTtcblx0XHRcdGlmKG9sZFRhZy5wYXJlbnROb2RlKSBvbGRUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRUYWcpO1xuXHRcdH1cblx0XHRvbGRUYWdzLmxlbmd0aCA9IDA7XG5cdH0sIGFwcGx5OiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5ld1RhZ3MubGVuZ3RoOyBpKyspIG5ld1RhZ3NbaV0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdFx0bmV3VGFncy5sZW5ndGggPSAwO1xuXHR9IH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMubWluaUNzcyA9IChjaHVua0lkcywgcmVtb3ZlZENodW5rcywgcmVtb3ZlZE1vZHVsZXMsIHByb21pc2VzLCBhcHBseUhhbmRsZXJzLCB1cGRhdGVkTW9kdWxlc0xpc3QpID0+IHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGNodW5rSWRzLmZvckVhY2goKGNodW5rSWQpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHR2YXIgb2xkVGFnID0gZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpO1xuXHRcdGlmKCFvbGRUYWcpIHJldHVybjtcblx0XHRwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciB0YWcgPSBjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCAoKSA9PiB7XG5cdFx0XHRcdHRhZy5hcyA9IFwic3R5bGVcIjtcblx0XHRcdFx0dGFnLnJlbCA9IFwicHJlbG9hZFwiO1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9LCByZWplY3QpO1xuXHRcdFx0b2xkVGFncy5wdXNoKG9sZFRhZyk7XG5cdFx0XHRuZXdUYWdzLnB1c2godGFnKTtcblx0XHR9KSk7XG5cdH0pO1xufSIsImNvbnN0IHJhbmRvbVVVSUQgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8ucmFuZG9tVVVJRCAmJiBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHJhbmRvbVVVSURcbn07IiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gSW4gdGhlIGJyb3dzZXIgd2UgdGhlcmVmb3JlXG4vLyByZXF1aXJlIHRoZSBjcnlwdG8gQVBJIGFuZCBkbyBub3Qgc3VwcG9ydCBidWlsdC1pbiBmYWxsYmFjayB0byBsb3dlciBxdWFsaXR5IHJhbmRvbSBudW1iZXJcbi8vIGdlbmVyYXRvcnMgKGxpa2UgTWF0aC5yYW5kb20oKSkuXG5sZXQgZ2V0UmFuZG9tVmFsdWVzO1xuY29uc3Qgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIC8vIGxhenkgbG9hZCBzbyB0aGF0IGVudmlyb25tZW50cyB0aGF0IG5lZWQgdG8gcG9seWZpbGwgaGF2ZSBhIGNoYW5jZSB0byBkbyBzb1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi5cbiAgICBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pO1xuXG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHJldHVybiAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcmFnZSB7XG4gIC8qXG4gICAg0JrQu9Cw0YHRgSDQtNC70Y8g0YDQsNCx0L7RgtGLINGBIGxvY2FsU3RvcmFnZVxuICAgICAgICByZWFkKGRhdGFLZXkpIC0g0YfRgtC10L3QuNC1INC00LDQvdC90YvRhSDQv9C+INC60LvRjtGH0YMgZGF0YUtleSDQuNC3IGxvY2FsU3RvcmFnZVxuICAgICAgICB3cml0ZShkYXRhS2V5LCBkYXRhKSAtINGB0L7RhdGA0LDQvdC10L3QuNC1INC00LDQvdC90YvRhSBkYXRhINC/0L4g0LrQu9GO0YfRgyBkYXRhS2V5INCyIGxvY2FsU3RvcmFnZVxuICAgICAgICByZW1vdmUoZGF0YUtleSwgZGF0YSkgLSDRg9C00LDQu9C10L3QuNC1INC00LDQvdC90YvRhSBkYXRhINC/0L4g0LrQu9GO0YfRgyBkYXRhS2V5INCyIGxvY2FsU3RvcmFnZVxuICAgICovXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5sb2NhbFN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9XG5cbiAgcmVhZEl0ZW0oZGF0YUtleSkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGRhdGFLZXkpO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB3cml0ZUl0ZW0oZGF0YUtleSwgZGF0YSkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGRhdGFLZXksIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBlLmNvZGU7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlSXRlbShkYXRhS2V5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZGF0YUtleSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZS5jb2RlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0ICcuL3Rhc2tzbGlzdC5jc3MnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgU3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UnO1xuXG4vKlxuY2xhc3MgVGFza3NMaXN0V2lkZ2V0XG5cbiAg0J/QsNGA0LDQvNC10YLRgNGLINC60L7QvdGB0YLRgNGD0LrRgtC+0YDQsDpcbiAgICBwYXJlbnRFbCAtINC60L7QvdGC0LXQudC90LXRgFxuICAgIHRhc2tzTGlzdCAtINC/0LXRgNCy0L7QvdCw0YfQsNC70YzQvdGL0Lkg0YHQv9C40YHQvtC6INC30LDQtNCw0YcgPSBbXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiBcItCd0LDQuNC80LXQvdC+0LLQsNC90LjQtSDRgdC/0LjRgdC60LAgMVwiLFxuICAgICAgICBpdGVtczogWyfQl9Cw0LTQsNC90LjQtSAxJywgJ9CX0LDQtNCw0L3QuNC1IDInLCAuLi5dXG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiBcItCd0LDQuNC80LXQvdC+0LLQsNC90LjQtSDRgdC/0LjRgdC60LAgMlwiLFxuICAgICAgICBpdGVtczogWyfQl9Cw0LTQsNC90LjQtSAxJywgJ9CX0LDQtNCw0L3QuNC1IDInLCAuLi5dXG4gICAgICB9LFxuXG4gICAgICAuLi5cbiAgICBdXG4gICAgaXNVc2VTdG9yYWdlIC0g0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGML9C90LUg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINC70L7QutCw0LvRjNC90L7QtSDRhdGA0LDQvdC40LvQuNGJ0LUgKNC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOINC40YHQv9C+0LvRjNC30L7QstCw0YLRjClcbiovXG5cbmNvbnN0IFNUWUxFX0RSQUdHSU5HID0gJ2RyYWdnaW5nJztcbmNvbnN0IFNUWUxFX0hPVkVSRUQgPSAnaG92ZXJlZCc7XG5jb25zdCBTVFlMRV9EUk9QID0gJ2Ryb3AnO1xuY29uc3QgU1RZTEVfSElEREVOID0gJ2hpZGRlbic7XG5jb25zdCBEQVRBX0tFWSA9ICd0YXNrc2xpc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXNrc0xpc3RXaWRnZXQge1xuICBjb25zdHJ1Y3RvcihwYXJlbnRFbCwgdGFza3NMaXN0LCBpc1VzZVN0b3JhZ2UgPSB0cnVlKSB7XG4gICAgdGhpcy5wYXJlbnRFbCA9IHBhcmVudEVsO1xuICAgIHRoaXMuaXNVc2VTdG9yYWdlID0gaXNVc2VTdG9yYWdlO1xuICAgIHRoaXMuc2hpZnRYID0gMDtcbiAgICB0aGlzLnNoaWZ0WSA9IDA7XG4gICAgdGhpcy5kcmFnSXRlbSA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuc3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XG4gICAgaWYgKGlzVXNlU3RvcmFnZSkge1xuICAgICAgdGhpcy50YXNrc0xpc3QgPSB0aGlzLnN0b3JhZ2UucmVhZEl0ZW0oREFUQV9LRVkpO1xuICAgICAgaWYgKCF0aGlzLnRhc2tzTGlzdCkge1xuICAgICAgICB0aGlzLnRhc2tzTGlzdCA9IHRhc2tzTGlzdDtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RvcmFnZS53cml0ZUl0ZW0oREFUQV9LRVksIHRoaXMudGFza3NMaXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50YXNrc0xpc3QgPSB0YXNrc0xpc3Q7XG4gICAgfVxuXG4gICAgLy8g0JTQvtCx0LDQstC70LXQvdC40LUg0YPQvdC40LrQsNC70YzQvdGL0YUg0L3QvtC80LXRgNC+0LIg0LTQu9GPINC60LDQttC00L7Qs9C+INGB0L/QuNGB0LrQsFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRoaXMudGFza3NMaXN0LmZvckVhY2goKGxpc3QpID0+IHsgbGlzdC5pZCA9IHV1aWR2NCgpOyB9KTtcbiAgfVxuXG4gIHN0YXRpYyBpdGVtSFRNTChpdGVtVGV4dCkge1xuICAgIGNvbnN0IGlkID0gdXVpZHY0KCk7XG4gICAgY29uc3QgaHRtbCA9IGBcbiAgICAgICAgPGxpIGNsYXNzPVwidGFza3NfX2l0ZW0gbGlzdC1ncm91cC1pdGVtIG1iLTJcIiBkcmFnZ2FibGU9XCJ0cnVlXCIgZGF0YS1pZD1cIiR7aWR9XCI+XG4gICAgICAgICAgJHtpdGVtVGV4dH1cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbV9fY2xvc2UgaGlkZGVuXCIgdGl0bGU9XCLQo9C00LDQu9C40YLRjCDQt9Cw0LTQsNGH0YNcIj4mIzEwMDA1OzwvZGl2PlxuICAgICAgICA8L2xpPmA7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlubmVySFRNTDogaHRtbCxcbiAgICAgIGlkLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgaXRlbXNIVE1MKGl0ZW1zKSB7XG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBpdGVtcy5mb3JFYWNoKCh0YXNrVGV4dCkgPT4ge1xuICAgICAgaHRtbCArPSB0aGlzLml0ZW1IVE1MKHRhc2tUZXh0KS5pbm5lckhUTUw7XG4gICAgfSk7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cblxuICBzdGF0aWMgdGFza3NMaXN0SFRNTCh0YXNrc0xpc3QpIHtcbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC00IGgtMTAwIHB5LTJcIj4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFza3NfX2NhcmQgY2FyZFwiIGRhdGEtaWQ9XCIke3Rhc2tzTGlzdC5pZH1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrc19faGVhZGVyIGNhcmQtaGVhZGVyIHAtMlwiPlxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cInRhc2tzX190aXRsZSBtYi0wXCI+JHt0YXNrc0xpc3QudGl0bGV9PC9oNT5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFza3NfX2JvZHkgY2FyZC1ib2R5IGgtMTAwIHAtMlwiIGRhdGEtbWRiLXBlcmZlY3Qtc2Nyb2xsYmFyPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cInRhc2tzX19saXN0IGxpc3QtZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgJHtUYXNrc0xpc3RXaWRnZXQuaXRlbXNIVE1MKHRhc2tzTGlzdC5pdGVtcyl9XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFza3NfX2Zvb3RlciBjYXJkLWZvb3RlciB0ZXh0LXN0YXJ0IHAtMlwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtX19hZGRcIj4mIzEwMDA5OyDQlNC+0LHQsNCy0LjRgtGMINC90L7QstGD0Y4g0LrQsNGA0YLQvtGH0LrRgzwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtX19jYXJkIGhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9XCJmb3JtLW91dGxpbmUgbWItMlwiPlxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJuZXdfX2l0ZW1fX3RleHQgZm9ybS1jb250cm9sIG1iLTJcIlxuICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi0JLQstC10LTQuNGC0LUg0YLQtdC60YHRgiDQutCw0YDRgtC+0YfQutC4XCI+PC90ZXh0YXJlYT5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm5ld19faXRlbV9fYWRkIGJ0biBidG4tc3VjY2VzcyBidG4tc21cIiB0aXRsZT1cItCU0L7QsdCw0LLQuNGC0Ywg0L3QvtCy0YPRjiDQt9Cw0LTQsNGH0YNcIj5cbiAgICAgICAgICAgICAgICAgICAgICDQlNC+0LHQsNCy0LjRgtGMXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwibmV3X19pdGVtX19jbG9zZSBidG4gYnRuLXRyYW5zcGFyZW50IGJ0bi1zbVwiIHRpdGxlPVwi0JfQsNC60YDRi9GC0Ywg0L7QutC90L4g0LTQvtCx0LDQstC70LXQvdC40Y9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAmIzEwMDA1O1xuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzdGF0aWMgaWRTZWxlY3RvcihpZCkge1xuICAgIHJldHVybiBgW2RhdGEtaWQ9XCIke2lkfVwiXWA7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHNob3dDYXJkU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuICcuaXRlbV9fYWRkJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXRlbVNlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLnRhc2tzX19pdGVtJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXRlbUNsYXNzKCkge1xuICAgIHJldHVybiAndGFza3NfX2l0ZW0nO1xuICB9XG5cbiAgc3RhdGljIGdldCBsaXN0SXRlbXNTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy50YXNrc19fbGlzdCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGxpc3RJdGVtc0NsYXNzKCkge1xuICAgIHJldHVybiAndGFza3NfX2xpc3QnO1xuICB9XG5cbiAgc3RhdGljIGdldCBkZWxJdGVtU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuICcuaXRlbV9fY2xvc2UnO1xuICB9XG5cbiAgc3RhdGljIGdldCBkZWxJdGVtQ2xhc3MoKSB7XG4gICAgcmV0dXJuICdpdGVtX19jbG9zZSc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGNhcmRTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gJy50YXNrc19fY2FyZCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGNhcmRUaXRsZVNlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLnRhc2tzX190aXRsZSc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGNsb3NlQ2FyZFNlbGVjdG9yKCkge1xuICAgIHJldHVybiAnLm5ld19faXRlbV9fY2xvc2UnO1xuICB9XG5cbiAgc3RhdGljIGdldCBhZGRDYXJkU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuICcubmV3X19pdGVtX19hZGQnO1xuICB9XG5cbiAgc3RhdGljIGdldCBjYXJkRGl2U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuICcuaXRlbV9fY2FyZCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHRleHROZXdJdGVtU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuICcubmV3X19pdGVtX190ZXh0JztcbiAgfVxuXG4gIHN0YXRpYyBjaGFuZ2VDbGFzc1RhcmdldCh0YXJnZXQsIHN0eWxlLCBpc1JlbW92ZSA9IGZhbHNlKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoaXNSZW1vdmUpIHtcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoc3R5bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoc3R5bGUpO1xuICAgICAgfVxuICAgIH0sIDApO1xuICB9XG5cbiAgc3RhdGljIGdldE5leHRFbGVtZW50KGN1cnNvclBvc2l0aW9uLCBjdXJyZW50RWxlbWVudCkge1xuICAgIGNvbnN0IGN1cnJlbnRFbGVtZW50Q29vcmQgPSBjdXJyZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBjdXJyZW50RWxlbWVudENlbnRlciA9IGN1cnJlbnRFbGVtZW50Q29vcmQueSArIGN1cnJlbnRFbGVtZW50Q29vcmQuaGVpZ2h0IC8gMjtcblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gKGN1cnNvclBvc2l0aW9uIDwgY3VycmVudEVsZW1lbnRDZW50ZXIpXG4gICAgICA/IGN1cnJlbnRFbGVtZW50XG4gICAgICA6IGN1cnJlbnRFbGVtZW50Lm5leHRTaWJsaW5nO1xuICAgICAgLy8gY3VycmVudEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgcmV0dXJuIG5leHRFbGVtZW50O1xuICB9XG5cbiAgLy8g0KDQsNC30LzQtdGC0LrQsCBIVE1MINC4INC+0YLRgdC70LXQttC40LLQsNC90LjQtSDRgdC+0LHRi9GC0LjQuVxuICBiaW5kVG9ET00oKSB7XG4gICAgLy8g0J7RgtGA0LjRgdC+0LLQutCwIEhUTUxcbiAgICB0aGlzLnBhcmVudEVsLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMudGFza3NMaXN0LmZvckVhY2goKHRhc2tzTGlzdCkgPT4ge1xuICAgICAgdGhpcy5wYXJlbnRFbC5pbm5lckhUTUwgKz0gVGFza3NMaXN0V2lkZ2V0LnRhc2tzTGlzdEhUTUwodGFza3NMaXN0KTtcbiAgICB9KTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9C10L3QuNC1INC+0YLRgdC70LXQttC40LLQsNC90LjRjyDRgdC+0LHRi9GC0LjQuSDQvdCwINC60LDQttC00YvQuSDRgdC/0LjRgdC+0LpcbiAgICB0aGlzLnRhc2tzTGlzdC5mb3JFYWNoKChsaXN0KSA9PiB0aGlzLmluaXRFdmVudHMobGlzdC5pZCkpO1xuICB9XG5cbiAgc2F2ZUl0ZW1zKCkge1xuICAgIGlmICghdGhpcy5pc1VzZVN0b3JhZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0YXNrc0NhcmRzID0gdGhpcy5wYXJlbnRFbC5xdWVyeVNlbGVjdG9yQWxsKFRhc2tzTGlzdFdpZGdldC5jYXJkU2VsZWN0b3IpO1xuICAgIHRoaXMudGFza3NMaXN0ID0gW107XG5cbiAgICB0YXNrc0NhcmRzLmZvckVhY2goKGNhcmQpID0+IHtcbiAgICAgIGNvbnN0IGxpc3QgPSB7fTtcbiAgICAgIGNvbnN0IHRhc2tzTGlzdEl0ZW1zID0gY2FyZC5xdWVyeVNlbGVjdG9yKFRhc2tzTGlzdFdpZGdldC5saXN0SXRlbXNTZWxlY3Rvcik7XG4gICAgICBjb25zdCB0aXRsZSA9IGNhcmQucXVlcnlTZWxlY3RvcihUYXNrc0xpc3RXaWRnZXQuY2FyZFRpdGxlU2VsZWN0b3IpO1xuICAgICAgY29uc3QgaXRlbXMgPSB0YXNrc0xpc3RJdGVtcy5xdWVyeVNlbGVjdG9yQWxsKFRhc2tzTGlzdFdpZGdldC5pdGVtU2VsZWN0b3IpO1xuXG4gICAgICBsaXN0LnRpdGxlID0gdGl0bGUuaW5uZXJUZXh0O1xuICAgICAgbGlzdC5pdGVtcyA9IFtdO1xuICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4gbGlzdC5pdGVtcy5wdXNoKGl0ZW0uaW5uZXJIVE1MKSk7XG5cbiAgICAgIHRoaXMudGFza3NMaXN0LnB1c2gobGlzdCk7XG4gICAgfSk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnRhc2tzTGlzdCk7XG4gICAgdGhpcy5zdG9yYWdlLndyaXRlSXRlbShEQVRBX0tFWSwgdGhpcy50YXNrc0xpc3QpO1xuICB9XG5cbiAgaW5pdEV2ZW50cyhpZCkge1xuICAgIGNvbnN0IHRhc2tzQ2FyZCA9IHRoaXMucGFyZW50RWwucXVlcnlTZWxlY3RvcihUYXNrc0xpc3RXaWRnZXQuaWRTZWxlY3RvcihpZCkpO1xuICAgIGNvbnN0IHRhc2tzTGlzdEl0ZW1zID0gdGFza3NDYXJkLnF1ZXJ5U2VsZWN0b3IoVGFza3NMaXN0V2lkZ2V0Lmxpc3RJdGVtc1NlbGVjdG9yKTtcblxuICAgIC8vINCe0YLRgNCw0LHQvtGC0LrQsCDRgdC+0LHRi9GC0LjQuSDQvdCwINC00L7QsdCw0LLQu9C10L3QuNC4INC90L7QstC+0Lkg0LrQsNGA0YLQvtGH0LrQuC3Qt9Cw0LTQsNGH0LhcbiAgICBjb25zdCBzaG93Q2FyZEl0ZW0gPSB0YXNrc0NhcmQucXVlcnlTZWxlY3RvcihUYXNrc0xpc3RXaWRnZXQuc2hvd0NhcmRTZWxlY3Rvcik7XG4gICAgY29uc3QgdGV4dGFyZWFJdGVtID0gdGFza3NDYXJkLnF1ZXJ5U2VsZWN0b3IoVGFza3NMaXN0V2lkZ2V0LnRleHROZXdJdGVtU2VsZWN0b3IpO1xuICAgIGNvbnN0IGFkZE5ld0l0ZW0gPSB0YXNrc0NhcmQucXVlcnlTZWxlY3RvcihUYXNrc0xpc3RXaWRnZXQuYWRkQ2FyZFNlbGVjdG9yKTtcbiAgICBjb25zdCBjbG9zZUNhcmRJdGVtID0gdGFza3NDYXJkLnF1ZXJ5U2VsZWN0b3IoVGFza3NMaXN0V2lkZ2V0LmNsb3NlQ2FyZFNlbGVjdG9yKTtcblxuICAgIHNob3dDYXJkSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHRoaXMub25DbGlja1Nob3dDYXJkKGV2dCwgdGFza3NDYXJkKSk7XG4gICAgdGV4dGFyZWFJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZ0KSA9PiB0aGlzLm9uRW50ZXJOZXdJdGVtKGV2dCwgdGFza3NDYXJkLCB0YXNrc0xpc3RJdGVtcykpO1xuICAgIGFkZE5ld0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB0aGlzLm9uQ2xpY2tBZGRDYXJkKGV2dCwgdGFza3NDYXJkLCB0YXNrc0xpc3RJdGVtcykpO1xuICAgIGNsb3NlQ2FyZEl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB0aGlzLm9uQ2xpY2tDbG9zZUNhcmQoZXZ0LCB0YXNrc0NhcmQpKTtcblxuICAgIHRoaXMub25EcmFnTGVhdmUgPSB0aGlzLm9uRHJhZ0xlYXZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkRyb3AgPSB0aGlzLm9uRHJvcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25EcmFnT3ZlciA9IHRoaXMub25EcmFnT3Zlci5iaW5kKHRoaXMpO1xuICAgIHRhc2tzTGlzdEl0ZW1zLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIHRoaXMub25EcmFnTGVhdmUpO1xuICAgIHRhc2tzTGlzdEl0ZW1zLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLm9uRHJvcCk7XG4gICAgdGFza3NMaXN0SXRlbXMuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCB0aGlzLm9uRHJhZ092ZXIpO1xuXG4gICAgdGhpcy5pbml0SXRlbXNFdmVudHModGFza3NMaXN0SXRlbXMpO1xuICB9XG5cbiAgaW5pdEl0ZW1zRXZlbnRzKHVsKSB7XG4gICAgLy8g0J7RgtGA0LDQsdC+0YLQutCwINGB0L7QsdGL0YLQuNC5INC90LAg0LrQsNC20LTQvtC5INC30LDQtNCw0YfQtSDQuNC3INGB0L/QuNGB0LrQsFxuICAgIGNvbnN0IGl0ZW1zID0gdWwucXVlcnlTZWxlY3RvckFsbChUYXNrc0xpc3RXaWRnZXQuaXRlbVNlbGVjdG9yKTtcbiAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB0aGlzLmluaXRJdGVtRXZlbnRzKGl0ZW0pKTtcbiAgfVxuXG4gIGluaXRJdGVtRXZlbnRzKGl0ZW0pIHtcbiAgICBUYXNrc0xpc3RXaWRnZXQuY2hhbmdlQ2xhc3NUYXJnZXQoaXRlbSwgU1RZTEVfRFJBR0dJTkcpO1xuXG4gICAgLy8g0KHQvtCx0YvRgtC40LUg0YPQtNCw0LvQtdC90LjRjyDQt9Cw0LTQsNGH0LhcbiAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IGl0ZW0ucXVlcnlTZWxlY3RvcihUYXNrc0xpc3RXaWRnZXQuZGVsSXRlbVNlbGVjdG9yKTtcbiAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGl0ZW0ucmVtb3ZlKCk7XG4gICAgICB0aGlzLnNhdmVJdGVtcygpO1xuICAgIH0pO1xuXG4gICAgLy8g0KHQvtCx0YvRgtC40LUg0LLRhdC+0LTQsCDQsiDQt9C+0L3RgyDQvdCw0LLQtdC00LXQvdC40Y8g0LrRg9GA0YHQvtGA0LAg0L3QsCDQt9Cw0LTQsNGH0YNcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHtcbiAgICAgIFRhc2tzTGlzdFdpZGdldC5jaGFuZ2VDbGFzc1RhcmdldChpdGVtLCBTVFlMRV9EUkFHR0lORywgdHJ1ZSk7XG4gICAgICBpZiAoIWNsb3NlQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnU1RZTEVfSElEREVOJykpIHtcbiAgICAgICAgY2xvc2VCdXR0b24uY2xhc3NMaXN0LmFkZCgnU1RZTEVfSElEREVOJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PiB7XG4gICAgICBUYXNrc0xpc3RXaWRnZXQuY2hhbmdlQ2xhc3NUYXJnZXQoaXRlbSwgU1RZTEVfRFJBR0dJTkcpO1xuICAgICAgaWYgKGNsb3NlQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnU1RZTEVfSElEREVOJykpIHtcbiAgICAgICAgY2xvc2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnU1RZTEVfSElEREVOJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyDQodC+0LHRi9GC0LjQtSDQstGF0L7QtNCwINCyINC30L7QvdGDINC90LDQstC10LTQtdC90LjRjyDQutGD0YDRgdC+0YDQsCDQvdCwINC30LDQtNCw0YfRg1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBUYXNrc0xpc3RXaWRnZXQuY2hhbmdlQ2xhc3NUYXJnZXQoaXRlbSwgU1RZTEVfSE9WRVJFRCwgdHJ1ZSk7XG4gICAgICBpZiAoY2xvc2VCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKFNUWUxFX0hJRERFTikpIHtcbiAgICAgICAgY2xvc2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShTVFlMRV9ISURERU4pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8g0KHQvtCx0YvRgtC40LUg0LLRi9GF0L7QtNCwINC40Lcg0LfQvtC90Ysg0L3QsNCy0LXQtNC10L3QuNGPINC60YPRgNGB0L7RgNCwINC90LAg0LfQsNC00LDRh9GDXG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgVGFza3NMaXN0V2lkZ2V0LmNoYW5nZUNsYXNzVGFyZ2V0KGl0ZW0sIFNUWUxFX0hPVkVSRUQpO1xuICAgICAgY29uc3QgZGVsQnV0dG9ucyA9IHRoaXMucGFyZW50RWwucXVlcnlTZWxlY3RvckFsbChUYXNrc0xpc3RXaWRnZXQuZGVsSXRlbVNlbGVjdG9yKTtcbiAgICAgIGRlbEJ1dHRvbnMuZm9yRWFjaCgoZGVsQnV0dG9uKSA9PiB7XG4gICAgICAgIGlmIChkZWxCdXR0b24gJiYgIWRlbEJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoU1RZTEVfSElEREVOKSkge1xuICAgICAgICAgIGRlbEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFNUWUxFX0hJRERFTik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbkRyYWdTdGFydCA9IHRoaXMub25EcmFnU3RhcnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uRHJhZ0VuZCA9IHRoaXMub25EcmFnRW5kLmJpbmQodGhpcyk7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLm9uRHJhZ1N0YXJ0KTtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCB0aGlzLm9uRHJhZ0VuZCk7XG4gIH1cblxuICAvLyDQndCw0YfQsNC70L4g0L/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjRjyDQvtCx0YrQtdC60YLQsFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgb25EcmFnU3RhcnQoZXZ0KSB7XG4gICAgZXZ0LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L2h0bWwnLCBldnQuY3VycmVudFRhcmdldC5vdXRlckhUTUwpO1xuICAgIGV2dC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIGV2dC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaWQpO1xuICAgIHRoaXMuZHJhZ0l0ZW0gPSBldnQuY3VycmVudFRhcmdldDtcbiAgICBUYXNrc0xpc3RXaWRnZXQuY2hhbmdlQ2xhc3NUYXJnZXQodGhpcy5kcmFnSXRlbSwgU1RZTEVfSE9WRVJFRCk7XG4gICAgVGFza3NMaXN0V2lkZ2V0LmNoYW5nZUNsYXNzVGFyZ2V0KHRoaXMuZHJhZ0l0ZW0sIFNUWUxFX0RSQUdHSU5HLCB0cnVlKTtcbiAgICAvLyBjb25zb2xlLmxvZygnb25EcmFnU3RhcnQnLCB0aGlzLmRyYWdJdGVtKTtcbiAgfVxuXG4gIC8vINCe0LrQvtC90YfQsNC90LjQtSDQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNGPINC+0LHRitC10LrRgtCwXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBvbkRyYWdFbmQoZXZ0KSB7XG4gICAgLy8gY29uc29sZS5sb2coJ29uRHJhZ0VuZCcpO1xuICAgIFRhc2tzTGlzdFdpZGdldC5jaGFuZ2VDbGFzc1RhcmdldChldnQuY3VycmVudFRhcmdldCwgU1RZTEVfRFJBR0dJTkcpO1xuICAgIHRoaXMuZHJhZ0l0ZW0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50YXNrc0NhcmQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyDQntCx0YrQtdC60YIg0L/QtdGA0LXRgtCw0YnQtdC9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBvbkRyb3AoZXZ0KSB7XG4gICAgLy8gY29uc29sZS5sb2coJ29uRHJvcCcpO1xuICAgIGNvbnN0IHRhc2tzQ2FyZCA9IGV2dC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoVGFza3NMaXN0V2lkZ2V0LmNhcmRTZWxlY3Rvcik7XG4gICAgVGFza3NMaXN0V2lkZ2V0LmNoYW5nZUNsYXNzVGFyZ2V0KHRhc2tzQ2FyZCwgU1RZTEVfRFJPUCk7XG5cbiAgICB0aGlzLnNhdmVJdGVtcygpO1xuICAgIHRoaXMuaW5pdEl0ZW1zRXZlbnRzKGV2dC5jdXJyZW50VGFyZ2V0KTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBvbkRyYWdPdmVyKGV2dCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgdGFza3NDYXJkID0gZXZ0LnRhcmdldC5jbG9zZXN0KFRhc2tzTGlzdFdpZGdldC5jYXJkU2VsZWN0b3IpO1xuICAgIGlmICh0aGlzLnRhc2tzQ2FyZCAmJiB0aGlzLnRhc2tzQ2FyZC5kYXRhc2V0LmlkICE9PSB0YXNrc0NhcmQuZGF0YXNldC5pZCkge1xuICAgICAgVGFza3NMaXN0V2lkZ2V0LmNoYW5nZUNsYXNzVGFyZ2V0KHRoaXMudGFza3NDYXJkLCBTVFlMRV9EUk9QKTtcbiAgICB9XG4gICAgdGhpcy50YXNrc0NhcmQgPSB0YXNrc0NhcmQ7XG4gICAgVGFza3NMaXN0V2lkZ2V0LmNoYW5nZUNsYXNzVGFyZ2V0KHRoaXMudGFza3NDYXJkLCBTVFlMRV9EUk9QLCB0cnVlKTtcblxuICAgIGNvbnN0IGN1cnJlbnRFbGVtZW50ID0gZXZ0LnRhcmdldDtcbiAgICBjb25zdCBpc01vdmVhYmxlID0gdGhpcy5kcmFnSXRlbSAhPT0gY3VycmVudEVsZW1lbnRcbiAgICAgICYmIGN1cnJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhUYXNrc0xpc3RXaWRnZXQuaXRlbUNsYXNzKTtcblxuICAgIGlmICghaXNNb3ZlYWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gVGFza3NMaXN0V2lkZ2V0LmdldE5leHRFbGVtZW50KGV2dC5jbGllbnRZLCBjdXJyZW50RWxlbWVudCk7XG4gICAgY29uc3QgdGFza3NMaXN0ID0gZXZ0LmN1cnJlbnRUYXJnZXQuY2xvc2VzdChUYXNrc0xpc3RXaWRnZXQubGlzdEl0ZW1zU2VsZWN0b3IpO1xuICAgIHRhc2tzTGlzdC5pbnNlcnRCZWZvcmUodGhpcy5kcmFnSXRlbSwgbmV4dEVsZW1lbnQpO1xuICB9XG5cbiAgLy8g0JLRi9GF0L7QtCDQvtCx0YrQtdC60YLQsCDQuNC3INC30L7QvdGLINCz0LTQtSDQvNC+0LbQtdGCINCx0YvRgtGMINGB0LHRgNC+0YjQtdC9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBvbkRyYWdMZWF2ZShldnQpIHtcbiAgICBjb25zdCB0YXNrc0NhcmQgPSBldnQudGFyZ2V0LmNsb3Nlc3QoVGFza3NMaXN0V2lkZ2V0LmNhcmRTZWxlY3Rvcik7XG4gICAgVGFza3NMaXN0V2lkZ2V0LmNoYW5nZUNsYXNzVGFyZ2V0KHRhc2tzQ2FyZCwgU1RZTEVfRFJPUCk7XG4gIH1cblxuICAvLyDQlNC+0LHQsNCy0LvQtdC90LjQtSDQvdC+0LLQvtC5INC30LDQtNCw0YfQuCDQv9C+INC90LDQttCw0YLQuNGOIEVudGVyXG4gIG9uRW50ZXJOZXdJdGVtKGV2dCwgY2FyZCwgdWwpIHtcbiAgICBpZiAoZXZ0LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLm9uQ2xpY2tBZGRDYXJkKGV2dCwgY2FyZCwgdWwpO1xuICAgIH1cbiAgfVxuXG4gIC8vINCU0L7QsdCw0LLQu9C10L3QuNC1INC90L7QstC+0Lkg0LfQsNC00LDRh9C4XG4gIG9uQ2xpY2tBZGRDYXJkKGV2dCwgY2FyZCwgdWwpIHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBjYXJkSXRlbSA9IGNhcmQucXVlcnlTZWxlY3RvcihUYXNrc0xpc3RXaWRnZXQuY2FyZERpdlNlbGVjdG9yKTtcbiAgICBjb25zdCB0ZXh0SXRlbSA9IGNhcmRJdGVtLnF1ZXJ5U2VsZWN0b3IoVGFza3NMaXN0V2lkZ2V0LnRleHROZXdJdGVtU2VsZWN0b3IpO1xuICAgIGlmICh0ZXh0SXRlbS52YWx1ZS50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICB1bC5pbm5lckhUTUwgKz0gVGFza3NMaXN0V2lkZ2V0Lml0ZW1IVE1MKFt0ZXh0SXRlbS52YWx1ZV0pLmlubmVySFRNTDtcblxuICAgICAgdGhpcy5zYXZlSXRlbXMoKTtcbiAgICAgIHRoaXMuaW5pdEl0ZW1zRXZlbnRzKHVsKTtcbiAgICB9XG4gICAgdGV4dEl0ZW0udmFsdWUgPSAnJztcbiAgICB0aGlzLm9uQ2xpY2tDbG9zZUNhcmQoZXZ0LCBjYXJkKTtcbiAgfVxuXG4gIC8vINCf0L7QutCw0LfQsNGC0Ywg0LrQsNGA0YLQvtGH0LrRgyDQtNC+0LHQsNCy0LvQtdC90LjRjyDQvdC+0LLQvtC5INC30LDQtNCw0YfQuFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgb25DbGlja1Nob3dDYXJkKGV2dCwgY2FyZCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGNhcmRJdGVtID0gY2FyZC5xdWVyeVNlbGVjdG9yKFRhc2tzTGlzdFdpZGdldC5jYXJkRGl2U2VsZWN0b3IpO1xuICAgIGlmIChjYXJkSXRlbSAmJiBjYXJkSXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKSB7XG4gICAgICBjYXJkSXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICB9XG4gICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgfVxuXG4gIC8vINCX0LDQutGA0YvRgtGMINC60LDRgNGC0L7Rh9C60YMg0LTQvtCx0LDQstC70LXQvdC40Y8g0L3QvtCy0L7QuSDQt9Cw0LTQsNGH0LhcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIG9uQ2xpY2tDbG9zZUNhcmQoZXZ0LCBjYXJkKSB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgY2FyZEl0ZW0gPSBjYXJkLnF1ZXJ5U2VsZWN0b3IoVGFza3NMaXN0V2lkZ2V0LmNhcmREaXZTZWxlY3Rvcik7XG4gICAgY29uc3Qgc2hvd0NhcmQgPSBjYXJkLnF1ZXJ5U2VsZWN0b3IoVGFza3NMaXN0V2lkZ2V0LnNob3dDYXJkU2VsZWN0b3IpO1xuICAgIGlmIChzaG93Q2FyZCAmJiBzaG93Q2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKSB7XG4gICAgICBzaG93Q2FyZC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICB9XG4gICAgY2FyZEl0ZW0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gIH1cbn1cbiIsImltcG9ydCBUYXNrc0xpc3RXaWRnZXQgZnJvbSAnLi4vd2lkZ2V0cy90YXNrc2xpc3QvdGFza3NsaXN0JztcblxuY29uc3QgdGFza3NMaXN0ID0gW1xuICB7XG4gICAgdGl0bGU6ICfQp9GC0L4g0LfQsNC/0LvQsNC90LjRgNC+0LLQsNC90L4g0YHQtNC10LvQsNGC0YwnLFxuICAgIGl0ZW1zOiBbJ9CU0L7QtNC10LvQsNGC0Ywg0LTQvtC80LDRiNC90LXQtSDQt9Cw0LTQsNC90LjQtScsXG4gICAgICAn0JfQsNCy0LXRgNGI0LjRgtGMIEhUTUwg0LLQtdGA0YHRgtC60YMnLFxuICAgICAgJ9Cd0LDQv9C40YHQsNGC0Ywg0YLQtdGB0YLRiycsXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiAn0JfQsNC00LDQvdC40Y8g0LIg0L/RgNC+0YbQtdGB0YHQtScsXG4gICAgaXRlbXM6IFsn0KDQsNCx0L7RgtCwINC90LDQtCDQstC40LTQttC10YLQvtC8IFRhc2tzTGlzdCcsXG4gICAgICAn0JrQvdC+0L/QutCwINCU0J7QkdCQ0JLQmNCi0KwnLFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogJ9Ch0LTQtdC70LDQvdC+JyxcbiAgICBpdGVtczogWyfQntC/0LjRgdCw0L3QuNC1IFJFQURNRS5tZCcsXG4gICAgICAn0KHQv9C40YHQvtC6INC/0LDQutC10YLQvtCyIC0gcGFja2FnZS5qc29uJyxcbiAgICAgICfQntCx0YnQsNGPIEhUTUwt0YDQsNC30LzQtdGC0LrQsCDRgdGC0YDQsNC90LjRhtGLJyxcbiAgICAgICfQpNCw0LnQuyDQt9Cw0L/Rg9GB0LrQsCDQv9GA0LjQu9C+0LbQtdC90LjRjyBKUycsXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiAn0JfQsNC/0LvQsNC90LjRgNC+0LLQsNC90L4g0L3QsCDQtNCw0LvQtdC60L7QtSDQsdGD0LTRg9GJ0LXQtScsXG4gICAgaXRlbXM6IFsn0KHRgtCw0YLRjCDRh9C10LzQv9C40L7QvdC+0LwnLFxuICAgIF0sXG4gIH0sXG5dO1xuXG5jb25zdCB3aWRnZXRUYXNrc0xpc3QgPSBuZXcgVGFza3NMaXN0V2lkZ2V0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3aWRnZXQtY29udGFpbmVyJyksIHRhc2tzTGlzdCk7XG53aWRnZXRUYXNrc0xpc3QuYmluZFRvRE9NKCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZSgnLi9ub3JtYWxpemUtdXJsJyk7XG5cbnZhciBzcmNCeU1vZHVsZUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBub0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJztcbnZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB0aW1lKSB7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcblxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uQ2FsbCwgdGltZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKSB7XG4gIHZhciBzcmMgPSBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXTtcblxuICBpZiAoIXNyYykge1xuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgICBzcmMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgICB2YXIgbGFzdFNjcmlwdFRhZyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKGxhc3RTY3JpcHRUYWcpIHtcbiAgICAgICAgc3JjID0gbGFzdFNjcmlwdFRhZy5zcmM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3JjQnlNb2R1bGVJZFttb2R1bGVJZF0gPSBzcmM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVNYXApIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNwbGl0UmVzdWx0ID0gc3JjLnNwbGl0KC8oW15cXFxcL10rKVxcLmpzJC8pO1xuICAgIHZhciBmaWxlbmFtZSA9IHNwbGl0UmVzdWx0ICYmIHNwbGl0UmVzdWx0WzFdO1xuXG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlTWFwKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKCcuanMnLCAnLmNzcycpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZU1hcC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAobWFwUnVsZSkge1xuICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoZmlsZW5hbWUsIFwiXFxcXC5qcyRcIiksICdnJyk7XG4gICAgICByZXR1cm4gbm9ybWFsaXplVXJsKHNyYy5yZXBsYWNlKHJlZywgXCJcIi5jb25jYXQobWFwUnVsZS5yZXBsYWNlKC97ZmlsZU5hbWV9L2csIGZpbGVuYW1lKSwgXCIuY3NzXCIpKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbCwgdXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuXG4gICAgdXJsID0gZWwuaHJlZi5zcGxpdCgnPycpWzBdO1xuICB9XG5cbiAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbC5pc0xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAvLyBXZSBzZWVtIHRvIGJlIGFib3V0IHRvIHJlcGxhY2UgYSBjc3MgbGluayB0aGF0IGhhc24ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNoYW5naW5nIHRoZSBzYW1lIGZpbGUgbW9yZSB0aGFuIG9uY2UuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF1cmwgfHwgISh1cmwuaW5kZXhPZignLmNzcycpID4gLTEpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgZWwudmlzaXRlZCA9IHRydWU7XG4gIHZhciBuZXdFbCA9IGVsLmNsb25lTm9kZSgpO1xuICBuZXdFbC5pc0xvYWRlZCA9IGZhbHNlO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmhyZWYgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7XG5cbiAgaWYgKGVsLm5leHRTaWJsaW5nKSB7XG4gICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGVsLm5leHRTaWJsaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld0VsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSZWxvYWRVcmwoaHJlZiwgc3JjKSB7XG4gIHZhciByZXQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZiwge1xuICAgIHN0cmlwV1dXOiBmYWxzZVxuICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuXG4gIHNyYy5zb21lKGZ1bmN0aW9uICh1cmwpIHtcbiAgICBpZiAoaHJlZi5pbmRleE9mKHNyYykgPiAtMSkge1xuICAgICAgcmV0ID0gdXJsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlKHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKTtcbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB1cmwgPSBnZXRSZWxvYWRVcmwoZWwuaHJlZiwgc3JjKTtcblxuICAgIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHVwZGF0ZUNzcyhlbCwgdXJsKTtcbiAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkQWxsKCkge1xuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcbiAgLy8gSXQgaXMgbm90IGh0dHAgb3IgaHR0cHNcbiAgaWYgKCEvXmh0dHBzPzovaS50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG5vRG9jdW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZygnbm8gd2luZG93LmRvY3VtZW50IGZvdW5kLCB3aWxsIG5vdCBITVIgQ1NTJyk7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cblxuICB2YXIgZ2V0U2NyaXB0U3JjID0gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcblxuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzcycpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHJlbG9hZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gY3NzIHJlbG9hZCAlcycsIHNyYy5qb2luKCcgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWJvdW5jZSh1cGRhdGUsIDUwKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5mdW5jdGlvbiBub3JtYWxpemVVcmwocGF0aENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHBhdGhDb21wb25lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGl0ZW0pIHtcbiAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgIGNhc2UgJy4uJzpcbiAgICAgICAgYWNjdW11bGF0b3IucG9wKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCBbXSkuam9pbignLycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmxTdHJpbmcpIHtcbiAgdXJsU3RyaW5nID0gdXJsU3RyaW5nLnRyaW0oKTtcblxuICBpZiAoL15kYXRhOi9pLnRlc3QodXJsU3RyaW5nKSkge1xuICAgIHJldHVybiB1cmxTdHJpbmc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB1cmxTdHJpbmcuaW5kZXhPZignLy8nKSAhPT0gLTEgPyB1cmxTdHJpbmcuc3BsaXQoJy8vJylbMF0gKyAnLy8nIDogJyc7XG4gIHZhciBjb21wb25lbnRzID0gdXJsU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChwcm90b2NvbCwgJ2knKSwgJycpLnNwbGl0KCcvJyk7XG4gIHZhciBob3N0ID0gY29tcG9uZW50c1swXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLCAnJyk7XG4gIGNvbXBvbmVudHNbMF0gPSAnJztcbiAgdmFyIHBhdGggPSBub3JtYWxpemVVcmwoY29tcG9uZW50cyk7XG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRoO1xufTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNjcyOTEyMTIzOTA1XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi9ob21lL2FwcHZleW9yL3Byb2plY3RzL2FoanMtZG5kL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE2NzI5MTIxMjM4ODNcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiL2hvbWUvYXBwdmV5b3IvcHJvamVjdHMvYWhqcy1kbmQvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTY3MjkxMjEyMzk1NVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvaG9tZS9hcHB2ZXlvci9wcm9qZWN0cy9haGpzLWRuZC9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0aWYgKGNhY2hlZE1vZHVsZS5lcnJvciAhPT0gdW5kZWZpbmVkKSB0aHJvdyBjYWNoZWRNb2R1bGUuZXJyb3I7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdHRyeSB7XG5cdFx0dmFyIGV4ZWNPcHRpb25zID0geyBpZDogbW9kdWxlSWQsIG1vZHVsZTogbW9kdWxlLCBmYWN0b3J5OiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXSwgcmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXyB9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uaS5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHsgaGFuZGxlcihleGVjT3B0aW9ucyk7IH0pO1xuXHRcdG1vZHVsZSA9IGV4ZWNPcHRpb25zLm1vZHVsZTtcblx0XHRleGVjT3B0aW9ucy5mYWN0b3J5LmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGV4ZWNPcHRpb25zLnJlcXVpcmUpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRtb2R1bGUuZXJyb3IgPSBlO1xuXHRcdHRocm93IGU7XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBleGVjdXRpb24gaW50ZXJjZXB0b3Jcbl9fd2VicGFja19yZXF1aXJlX18uaSA9IFtdO1xuXG4iLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBcIm1haW5cIiArIFwiLmNzc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSAoKSA9PiAoXCJtYWluLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzb25cIik7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiY2NmYTFiOTc3NmYzZjNlMzc3MWJcIikiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jO1xuXG4vLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb25cbnZhciBjdXJyZW50Q2hpbGRNb2R1bGU7XG52YXIgY3VycmVudFBhcmVudHMgPSBbXTtcblxuLy8gc3RhdHVzXG52YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107XG52YXIgY3VycmVudFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4vLyB3aGlsZSBkb3dubG9hZGluZ1xudmFyIGJsb2NraW5nUHJvbWlzZXMgPSAwO1xudmFyIGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nID0gW107XG5cbi8vIFRoZSB1cGRhdGUgaW5mb1xudmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzO1xudmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0dmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlO1xuXHR2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTtcblx0bW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpO1xuXHRtb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzO1xuXHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0b3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTtcbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7XG5cdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXHRpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTtcblx0dmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuXHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcblx0XHRcdFx0dmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7XG5cdFx0XHRcdGlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuXHRcdFx0XHRcdHBhcmVudHMucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcblx0XHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuXHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcblx0XHRcdFx0XHRyZXF1ZXN0ICtcblx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuXHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHQpO1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmUocmVxdWVzdCk7XG5cdH07XG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiByZXF1aXJlW25hbWVdO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJlcXVpcmVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcXVpcmUsIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7XG5cdFx0fVxuXHR9XG5cdGZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdHJldHVybiB0cmFja0Jsb2NraW5nUHJvbWlzZShyZXF1aXJlLmUoY2h1bmtJZCkpO1xuXHR9O1xuXHRyZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vZHVsZUhvdE9iamVjdChtb2R1bGVJZCwgbWUpIHtcblx0dmFyIF9tYWluID0gY3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZDtcblx0dmFyIGhvdCA9IHtcblx0XHQvLyBwcml2YXRlIHN0dWZmXG5cdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfYWNjZXB0ZWRFcnJvckhhbmRsZXJzOiB7fSxcblx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuXHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuXHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuXHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuXHRcdF9tYWluOiBfbWFpbixcblx0XHRfcmVxdWlyZVNlbGY6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gbWUucGFyZW50cy5zbGljZSgpO1xuXHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gX21haW4gPyB1bmRlZmluZWQgOiBtb2R1bGVJZDtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuXHRcdH0sXG5cblx0XHQvLyBNb2R1bGUgQVBJXG5cdFx0YWN0aXZlOiB0cnVlLFxuXHRcdGFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2ssIGVycm9ySGFuZGxlcikge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBbaV1dID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRlY2xpbmU6IGZ1bmN0aW9uIChkZXApIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG5cdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG5cdFx0fSxcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG5cdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cdFx0aW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5fc2VsZkludmFsaWRhdGVkID0gdHJ1ZTtcblx0XHRcdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdFx0XHRjYXNlIFwiaWRsZVwiOlxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0XHRjYXNlIFwiY2hlY2tcIjpcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VcIjpcblx0XHRcdFx0Y2FzZSBcImFwcGx5XCI6XG5cdFx0XHRcdFx0KHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaChcblx0XHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvLyBpZ25vcmUgcmVxdWVzdHMgaW4gZXJyb3Igc3RhdGVzXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIE1hbmFnZW1lbnQgQVBJXG5cdFx0Y2hlY2s6IGhvdENoZWNrLFxuXHRcdGFwcGx5OiBob3RBcHBseSxcblx0XHRzdGF0dXM6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRpZiAoIWwpIHJldHVybiBjdXJyZW50U3RhdHVzO1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0dmFyIGlkeCA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblxuXHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0dmFyIHJlc3VsdHMgPSBbXTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcblx0XHRyZXN1bHRzW2ldID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cyk7XG59XG5cbmZ1bmN0aW9uIHVuYmxvY2soKSB7XG5cdGlmICgtLWJsb2NraW5nUHJvbWlzZXMgPT09IDApIHtcblx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSB7XG5cdFx0XHRcdHZhciBsaXN0ID0gYmxvY2tpbmdQcm9taXNlc1dhaXRpbmc7XG5cdFx0XHRcdGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nID0gW107XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGxpc3RbaV0oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdC8qIGZhbGx0aHJvdWdoICovXG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMrKztcblx0XHRcdHByb21pc2UudGhlbih1bmJsb2NrLCB1bmJsb2NrKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkgcmV0dXJuIGZuKCk7XG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXHRcdGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nLnB1c2goZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVzb2x2ZShmbigpKTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG5cdH1cblx0cmV0dXJuIHNldFN0YXR1cyhcImNoZWNrXCIpXG5cdFx0LnRoZW4oX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKVxuXHRcdC50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHtcblx0XHRcdGlmICghdXBkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBzZXRTdGF0dXMoYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSA/IFwicmVhZHlcIiA6IFwiaWRsZVwiKS50aGVuKFxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInByZXBhcmVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0XHRcdHJldHVybiBQcm9taXNlLmFsbChcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMpLnJlZHVjZShmdW5jdGlvbiAoXG5cdFx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRcdGtleVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5jLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUucixcblx0XHRcdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyxcblx0XHRcdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRbXSlcblx0XHRcdFx0KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0aWYgKGFwcGx5T25VcGRhdGUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkoYXBwbHlPblVwZGF0ZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicmVhZHlcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHVwZGF0ZWRNb2R1bGVzO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcbn1cblxuZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1cyAoc3RhdGU6IFwiICtcblx0XHRcdFx0XHRjdXJyZW50U3RhdHVzICtcblx0XHRcdFx0XHRcIilcIlxuXHRcdFx0KTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJhYm9ydFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHR2YXIgZGlzcG9zZVByb21pc2UgPSBzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHZhciBhcHBseVByb21pc2UgPSBzZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuXHR2YXIgZXJyb3I7XG5cdHZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcblx0fTtcblxuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5hcHBseSkge1xuXHRcdFx0dmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpO1xuXHRcdFx0aWYgKG1vZHVsZXMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChbZGlzcG9zZVByb21pc2UsIGFwcGx5UHJvbWlzZV0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiZmFpbFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBsaXN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImlkbGVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgfHwge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpIHtcblx0Y3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCA9IHVwZGF0ZWRNb2R1bGVzTGlzdDtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdFx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWRcblx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGhvdCB1cGRhdGUgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpO1xuXHR9KTtcbn1cblxuc2VsZltcIndlYnBhY2tIb3RVcGRhdGVhanNfZG5kXCJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHRpZihjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0KSBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpO1xuXHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0oKTtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdH1cbn07XG5cbnZhciBjdXJyZW50VXBkYXRlQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGU7XG52YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZVJ1bnRpbWU7XG5mdW5jdGlvbiBhcHBseUhhbmRsZXIob3B0aW9ucykge1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSBkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0gdW5kZWZpbmVkO1xuXHRmdW5jdGlvbiBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHModXBkYXRlTW9kdWxlSWQpIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjaGFpbjogW2lkXSxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG5cdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG5cdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG5cdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdGlmIChcblx0XHRcdFx0IW1vZHVsZSB8fFxuXHRcdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmICFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWQpXG5cdFx0XHQpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcblx0XHRcdFx0dmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18uY1twYXJlbnRJZF07XG5cdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcblx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuXHRcdFx0XHRxdWV1ZS5wdXNoKHtcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuXHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG5cdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuXHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuXHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG5cdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cblx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZShtb2R1bGUpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIG1vZHVsZS5pZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuXHRcdCk7XG5cdH07XG5cblx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gY3VycmVudFVwZGF0ZSkge1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0XHR2YXIgbmV3TW9kdWxlRmFjdG9yeSA9IGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdO1xuXHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuXHRcdFx0dmFyIHJlc3VsdDtcblx0XHRcdGlmIChuZXdNb2R1bGVGYWN0b3J5KSB7XG5cdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSB7XG5cdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRpZiAoXG5cdFx0XHRtb2R1bGUgJiZcblx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgfHwgbW9kdWxlLmhvdC5fbWFpbikgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBtb2R1bGUuaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0dmFyIGFjY2VwdENhbGxiYWNrID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlciA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnMucHVzaChlcnJvckhhbmRsZXIpO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBlcnJvckhhbmRsZXJzW2tdID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnNba10oZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba11cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgbyA9IDA7IG8gPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBvKyspIHtcblx0XHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbb107XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGl0ZW0ucmVxdWlyZShtb2R1bGVJZCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHQhY3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXVxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzk0KTtcbiJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsInJhbmRvbVVVSUQiLCJjcnlwdG8iLCJiaW5kIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5nIiwiRXJyb3IiLCJieXRlVG9IZXgiLCJpIiwicHVzaCIsInRvU3RyaW5nIiwic2xpY2UiLCJvcHRpb25zIiwiYnVmIiwib2Zmc2V0Iiwicm5kcyIsInJhbmRvbSIsImFyciIsInRvTG93ZXJDYXNlIiwidW5zYWZlU3RyaW5naWZ5IiwiU3RvcmFnZSIsImNvbnN0cnVjdG9yIiwidGhpcyIsImxvY2FsU3RvcmFnZSIsIndpbmRvdyIsInJlYWRJdGVtIiwiZGF0YUtleSIsImRhdGEiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwiZSIsIndyaXRlSXRlbSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJjb2RlIiwicmVtb3ZlSXRlbSIsIlNUWUxFX0RSQUdHSU5HIiwiU1RZTEVfSE9WRVJFRCIsIlNUWUxFX0RST1AiLCJTVFlMRV9ISURERU4iLCJEQVRBX0tFWSIsIlRhc2tzTGlzdFdpZGdldCIsInBhcmVudEVsIiwidGFza3NMaXN0IiwiaXNVc2VTdG9yYWdlIiwic2hpZnRYIiwic2hpZnRZIiwiZHJhZ0l0ZW0iLCJ1bmRlZmluZWQiLCJzdG9yYWdlIiwiZm9yRWFjaCIsImxpc3QiLCJpZCIsInV1aWR2NCIsInN0YXRpYyIsIml0ZW1UZXh0IiwiaW5uZXJIVE1MIiwiaXRlbXMiLCJodG1sIiwidGFza1RleHQiLCJpdGVtSFRNTCIsInRpdGxlIiwiaXRlbXNIVE1MIiwic2hvd0NhcmRTZWxlY3RvciIsIml0ZW1TZWxlY3RvciIsIml0ZW1DbGFzcyIsImxpc3RJdGVtc1NlbGVjdG9yIiwibGlzdEl0ZW1zQ2xhc3MiLCJkZWxJdGVtU2VsZWN0b3IiLCJkZWxJdGVtQ2xhc3MiLCJjYXJkU2VsZWN0b3IiLCJjYXJkVGl0bGVTZWxlY3RvciIsImNsb3NlQ2FyZFNlbGVjdG9yIiwiYWRkQ2FyZFNlbGVjdG9yIiwiY2FyZERpdlNlbGVjdG9yIiwidGV4dE5ld0l0ZW1TZWxlY3RvciIsInRhcmdldCIsInN0eWxlIiwiaXNSZW1vdmUiLCJzZXRUaW1lb3V0IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiY3Vyc29yUG9zaXRpb24iLCJjdXJyZW50RWxlbWVudCIsImN1cnJlbnRFbGVtZW50Q29vcmQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ5IiwiaGVpZ2h0IiwibmV4dFNpYmxpbmciLCJiaW5kVG9ET00iLCJ0YXNrc0xpc3RIVE1MIiwiaW5pdEV2ZW50cyIsInNhdmVJdGVtcyIsInRhc2tzQ2FyZHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2FyZCIsInRhc2tzTGlzdEl0ZW1zIiwicXVlcnlTZWxlY3RvciIsImlubmVyVGV4dCIsIml0ZW0iLCJ0YXNrc0NhcmQiLCJpZFNlbGVjdG9yIiwic2hvd0NhcmRJdGVtIiwidGV4dGFyZWFJdGVtIiwiYWRkTmV3SXRlbSIsImNsb3NlQ2FyZEl0ZW0iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0Iiwib25DbGlja1Nob3dDYXJkIiwib25FbnRlck5ld0l0ZW0iLCJvbkNsaWNrQWRkQ2FyZCIsIm9uQ2xpY2tDbG9zZUNhcmQiLCJvbkRyYWdMZWF2ZSIsIm9uRHJvcCIsIm9uRHJhZ092ZXIiLCJpbml0SXRlbXNFdmVudHMiLCJ1bCIsImluaXRJdGVtRXZlbnRzIiwiY2hhbmdlQ2xhc3NUYXJnZXQiLCJjbG9zZUJ1dHRvbiIsImNvbnRhaW5zIiwicHJldmVudERlZmF1bHQiLCJkZWxCdXR0b24iLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0VuZCIsImRhdGFUcmFuc2ZlciIsInNldERhdGEiLCJjdXJyZW50VGFyZ2V0Iiwib3V0ZXJIVE1MIiwiZGF0YXNldCIsImNsb3Nlc3QiLCJuZXh0RWxlbWVudCIsImdldE5leHRFbGVtZW50IiwiY2xpZW50WSIsImluc2VydEJlZm9yZSIsImtleSIsInRleHRJdGVtIiwidmFsdWUiLCJ0cmltIiwibGVuZ3RoIiwiY2FyZEl0ZW0iLCJzaG93Q2FyZCIsImRvY3VtZW50Iiwibm9ybWFsaXplVXJsIiwic3JjQnlNb2R1bGVJZCIsIk9iamVjdCIsImNyZWF0ZSIsIm5vRG9jdW1lbnQiLCJBcnJheSIsInByb3RvdHlwZSIsIm5vb3AiLCJ1cGRhdGVDc3MiLCJlbCIsInVybCIsImhyZWYiLCJzcGxpdCIsImlzVXJsUmVxdWVzdCIsImlzTG9hZGVkIiwiaW5kZXhPZiIsInZpc2l0ZWQiLCJuZXdFbCIsImNsb25lTm9kZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNvbmNhdCIsIkRhdGUiLCJub3ciLCJhcHBlbmRDaGlsZCIsInJlbG9hZEFsbCIsImVsZW1lbnRzIiwiY2FsbCIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlSWQiLCJjb25zb2xlIiwibG9nIiwiZm4iLCJ0aW1lb3V0IiwiZ2V0U2NyaXB0U3JjIiwic3JjIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxhc3RTY3JpcHRUYWciLCJmaWxlTWFwIiwic3BsaXRSZXN1bHQiLCJmaWxlbmFtZSIsIm1hcCIsIm1hcFJ1bGUiLCJyZWciLCJSZWdFeHAiLCJyZXBsYWNlIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9hZGVkIiwicmV0Iiwic3RyaXBXV1ciLCJzb21lIiwiZ2V0UmVsb2FkVXJsIiwicmVsb2FkU3R5bGUiLCJsb2NhbHMiLCJqb2luIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJmdW5jdGlvbkNhbGwiLCJhcHBseSIsImNsZWFyVGltZW91dCIsInVybFN0cmluZyIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsInBvcCIsImNzc1JlbG9hZCIsImhvdCIsImRpc3Bvc2UiLCJhY2NlcHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiY2FjaGVkTW9kdWxlIiwiZXJyb3IiLCJleGVjT3B0aW9ucyIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicmVxdWlyZSIsImhhbmRsZXIiLCJtIiwiYyIsImh1IiwiY2h1bmtJZCIsImgiLCJtaW5pQ3NzRiIsImhtckYiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwibyIsIm9iaiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImwiLCJkb25lIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsIm5jIiwic2V0QXR0cmlidXRlIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJkb25lRm5zIiwidHlwZSIsImhlYWQiLCJjdXJyZW50Q2hpbGRNb2R1bGUiLCJjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyIsInF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyIsImN1cnJlbnRNb2R1bGVEYXRhIiwiaW5zdGFsbGVkTW9kdWxlcyIsImN1cnJlbnRQYXJlbnRzIiwicmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzIiwiY3VycmVudFN0YXR1cyIsImJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2luZ1Byb21pc2VzV2FpdGluZyIsInNldFN0YXR1cyIsIm5ld1N0YXR1cyIsInJlc3VsdHMiLCJQcm9taXNlIiwiYWxsIiwidW5ibG9jayIsInRoZW4iLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJobXJNIiwidXBkYXRlIiwidXBkYXRlZE1vZHVsZXMiLCJrZXlzIiwiaG1yQyIsInByb21pc2VzIiwiciIsImludGVybmFsQXBwbHkiLCJyZXNvbHZlIiwiYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMiLCJob3RBcHBseSIsImVycm9ycyIsImZpbHRlciIsIkJvb2xlYW4iLCJkaXNwb3NlUHJvbWlzZSIsInJlc3VsdCIsImFwcGx5UHJvbWlzZSIsInJlcG9ydEVycm9yIiwiZXJyIiwib3V0ZGF0ZWRNb2R1bGVzIiwibW9kdWxlcyIsImhtckkiLCJobXJEIiwibWUiLCJfbWFpbiIsInJlcXVlc3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiY2hpbGRyZW4iLCJ3YXJuIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJkZWZpbmVQcm9wZXJ0eSIsInByb21pc2UiLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfYWNjZXB0ZWRFcnJvckhhbmRsZXJzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9yZXF1aXJlU2VsZiIsImRlcCIsImNhbGxiYWNrIiwiZXJyb3JIYW5kbGVyIiwiZGVjbGluZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJpbnZhbGlkYXRlIiwiY2hlY2siLCJzdGF0dXMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsInAiLCJmdWxsaHJlZiIsInJlamVjdCIsImxpbmtUYWciLCJyZWwiLCJlcnJvclR5cGUiLCJyZWFsSHJlZiIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsInRhZyIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFnIiwibWluaUNzcyIsImNodW5rSWRzIiwicmVtb3ZlZENodW5rcyIsInJlbW92ZWRNb2R1bGVzIiwiYXBwbHlIYW5kbGVycyIsInVwZGF0ZWRNb2R1bGVzTGlzdCIsImFzIiwiY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCIsImN1cnJlbnRVcGRhdGVDaHVua3MiLCJjdXJyZW50VXBkYXRlIiwiY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MiLCJjdXJyZW50VXBkYXRlUnVudGltZSIsImluc3RhbGxlZENodW5rcyIsImhtclNfanNvbnAiLCJ3YWl0aW5nVXBkYXRlUmVzb2x2ZXMiLCJsb2FkVXBkYXRlQ2h1bmsiLCJyZWFsU3JjIiwibWVzc2FnZSIsImdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsImNoYWluIiwicXVldWVJdGVtIiwicGFyZW50SWQiLCJwYXJlbnQiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiZiIsImpzb25wSG1yIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsIm5ld01vZHVsZUZhY3RvcnkiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiaiIsIm91dGRhdGVkTW9kdWxlSWQiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJjYWxsYmFja3MiLCJlcnJvckhhbmRsZXJzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJrIiwiZGVwZW5kZW5jeUlkIiwiZXJyMiIsIm9uRXJyb3JlZCIsIm9yaWdpbmFsRXJyb3IiLCJpZ25vcmVFcnJvcmVkIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwianNvbnAiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJzdGF0dXNUZXh0IiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=